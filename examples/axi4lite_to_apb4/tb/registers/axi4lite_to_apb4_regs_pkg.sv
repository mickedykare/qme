//----------------------------------------------------------------------
//   THIS IS AUTOMATICALLY GENERATED CODE
//   Generated by Mentor Graphics' Register Assistant V4.6 (Build 7)
//   UVM Register Kit version 1.1
//----------------------------------------------------------------------
// Project         : axi4lite_to_apb4_proj
// Unit            : axi4lite_to_apb4_regs_pkg
// File            : axi4lite_to_apb4_regs_pkg.sv
//----------------------------------------------------------------------
// Created by      : mikaela
// Creation Date   : 3/11/15 8:55 AM
//----------------------------------------------------------------------
// Title           : axi4lite_to_apb4_proj
//
// Description     : 
//
//----------------------------------------------------------------------

//----------------------------------------------------------------------
// axi4lite_to_apb4_regs_pkg
//----------------------------------------------------------------------
package axi4lite_to_apb4_regs_pkg;

   import uvm_pkg::*;

   `include "uvm_macros.svh"

   /* DEFINE REGISTER CLASSES */



   //--------------------------------------------------------------------
   // Class: axi4lite_to_apb4_sample_reg
   // 
   // Register of samples transactions
   //--------------------------------------------------------------------

   class axi4lite_to_apb4_sample_reg extends uvm_reg;
      `uvm_object_utils(axi4lite_to_apb4_sample_reg)

      uvm_reg_field data; // Sample data


      // Function: new
      // 
      function new(string name = "axi4lite_to_apb4_sample_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         data = uvm_reg_field::type_id::create("data");

         data.configure(this, 32, 0, "RO", 0, 32'h00000000, 1, 0, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: axi4lite_to_apb4_mst_config_reg
   // 
   // Master config register
   //--------------------------------------------------------------------

   class axi4lite_to_apb4_mst_config_reg extends uvm_reg;
      `uvm_object_utils(axi4lite_to_apb4_mst_config_reg)

      rand uvm_reg_field wr_rd_ratio; 


      // Function: new
      // 
      function new(string name = "axi4lite_to_apb4_mst_config_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         wr_rd_ratio = uvm_reg_field::type_id::create("wr_rd_ratio");

         wr_rd_ratio.configure(this, 3, 0, "RW", 0, 3'b000, 1, 1, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: axi4lite_to_apb4_sample_config_reg
   // 
   // Sample config register
   //--------------------------------------------------------------------

   class axi4lite_to_apb4_sample_config_reg extends uvm_reg;
      `uvm_object_utils(axi4lite_to_apb4_sample_config_reg)

      rand uvm_reg_field waddr_nd; // sample waddr normal data
      rand uvm_reg_field waddr_ni; // sample waddr normal instr
      rand uvm_reg_field waddr_pd; // sample waddr privileged data
      rand uvm_reg_field waddr_pi; // sample waddr privileged instr
      rand uvm_reg_field wdata_nd; // sample wdata normal data
      rand uvm_reg_field wdata_ni; // sample wdata normal instr
      rand uvm_reg_field wdata_pd; // sample wdata privileged data
      rand uvm_reg_field wdata_pi; // sample wdata privileged instr
      rand uvm_reg_field raddr_nd; // sample raddr normal data
      rand uvm_reg_field raddr_ni; // sample raddr normal instr
      rand uvm_reg_field raddr_pd; // sample raddr privileged data
      rand uvm_reg_field raddr_pi; // sample raddr privileged instr
      rand uvm_reg_field rdata_nd; // sample rdata normal data
      rand uvm_reg_field rdata_ni; // sample rdata normal instr
      rand uvm_reg_field rdata_pd; // sample rdata privileged data
      rand uvm_reg_field rdata_pi; // sample rdata privileged instr


      // Function: new
      // 
      function new(string name = "axi4lite_to_apb4_sample_config_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         waddr_nd = uvm_reg_field::type_id::create("waddr_nd");
         waddr_ni = uvm_reg_field::type_id::create("waddr_ni");
         waddr_pd = uvm_reg_field::type_id::create("waddr_pd");
         waddr_pi = uvm_reg_field::type_id::create("waddr_pi");
         wdata_nd = uvm_reg_field::type_id::create("wdata_nd");
         wdata_ni = uvm_reg_field::type_id::create("wdata_ni");
         wdata_pd = uvm_reg_field::type_id::create("wdata_pd");
         wdata_pi = uvm_reg_field::type_id::create("wdata_pi");
         raddr_nd = uvm_reg_field::type_id::create("raddr_nd");
         raddr_ni = uvm_reg_field::type_id::create("raddr_ni");
         raddr_pd = uvm_reg_field::type_id::create("raddr_pd");
         raddr_pi = uvm_reg_field::type_id::create("raddr_pi");
         rdata_nd = uvm_reg_field::type_id::create("rdata_nd");
         rdata_ni = uvm_reg_field::type_id::create("rdata_ni");
         rdata_pd = uvm_reg_field::type_id::create("rdata_pd");
         rdata_pi = uvm_reg_field::type_id::create("rdata_pi");

         waddr_nd.configure(this, 1, 31, "RW", 0, 1'b0, 1, 1, 0);
         waddr_ni.configure(this, 1, 30, "RW", 0, 1'b0, 1, 1, 0);
         waddr_pd.configure(this, 1, 29, "RW", 0, 1'b0, 1, 1, 0);
         waddr_pi.configure(this, 1, 28, "RW", 0, 1'b0, 1, 1, 0);
         wdata_nd.configure(this, 1, 27, "RW", 0, 1'b0, 1, 1, 0);
         wdata_ni.configure(this, 1, 26, "RW", 0, 1'b0, 1, 1, 0);
         wdata_pd.configure(this, 1, 25, "RW", 0, 1'b0, 1, 1, 0);
         wdata_pi.configure(this, 1, 24, "RW", 0, 1'b0, 1, 1, 0);
         raddr_nd.configure(this, 1, 23, "RW", 0, 1'b0, 1, 1, 0);
         raddr_ni.configure(this, 1, 22, "RW", 0, 1'b0, 1, 1, 0);
         raddr_pd.configure(this, 1, 21, "RW", 0, 1'b0, 1, 1, 0);
         raddr_pi.configure(this, 1, 20, "RW", 0, 1'b0, 1, 1, 0);
         rdata_nd.configure(this, 1, 19, "RW", 0, 1'b0, 1, 1, 0);
         rdata_ni.configure(this, 1, 18, "RW", 0, 1'b0, 1, 1, 0);
         rdata_pd.configure(this, 1, 17, "RW", 0, 1'b0, 1, 1, 0);
         rdata_pi.configure(this, 1, 16, "RW", 0, 1'b0, 1, 1, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: axi4lite_to_apb4_axi_stat_reg
   // 
   // AXI Status register
   //--------------------------------------------------------------------

   class axi4lite_to_apb4_axi_stat_reg extends uvm_reg;
      `uvm_object_utils(axi4lite_to_apb4_axi_stat_reg)

      uvm_reg_field rd_cnt; 
      uvm_reg_field wr_cnt; 


      // Function: new
      // 
      function new(string name = "axi4lite_to_apb4_axi_stat_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         rd_cnt = uvm_reg_field::type_id::create("rd_cnt");
         wr_cnt = uvm_reg_field::type_id::create("wr_cnt");

         rd_cnt.configure(this, 10, 10, "RC", 0, 10'b0000000000, 1, 0, 0);
         wr_cnt.configure(this, 10, 0, "RC", 0, 10'b0000000000, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: axi4lite_to_apb4_apb_stat_reg
   // 
   // APB Status register
   //--------------------------------------------------------------------

   class axi4lite_to_apb4_apb_stat_reg extends uvm_reg;
      `uvm_object_utils(axi4lite_to_apb4_apb_stat_reg)

      uvm_reg_field rd_cnt; 
      uvm_reg_field wr_cnt; 


      // Function: new
      // 
      function new(string name = "axi4lite_to_apb4_apb_stat_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         rd_cnt = uvm_reg_field::type_id::create("rd_cnt");
         wr_cnt = uvm_reg_field::type_id::create("wr_cnt");

         rd_cnt.configure(this, 10, 10, "RC", 0, 10'b0000000000, 1, 0, 0);
         wr_cnt.configure(this, 10, 0, "RC", 0, 10'b0000000000, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: axi4lite_to_apb4_slv_config_reg
   // 
   // Slave config register
   //--------------------------------------------------------------------

   class axi4lite_to_apb4_slv_config_reg extends uvm_reg;
      `uvm_object_utils(axi4lite_to_apb4_slv_config_reg)

      rand uvm_reg_field use_merr_resp; 


      // Function: new
      // 
      function new(string name = "axi4lite_to_apb4_slv_config_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         use_merr_resp = uvm_reg_field::type_id::create("use_merr_resp");

         use_merr_resp.configure(this, 1, 0, "RW", 0, 1'b0, 1, 1, 0);
      endfunction
   endclass




   /* BLOCKS */



   //--------------------------------------------------------------------
   // Class: axi4lite_to_apb4_registers_axi4lite_to_apb4_register_map_coverage
   // 
   // Coverage for the 'axi4lite_to_apb4_register_map' in 'axi4lite_to_apb4_registers'
   //--------------------------------------------------------------------

   class axi4lite_to_apb4_registers_axi4lite_to_apb4_register_map_coverage extends uvm_object;
      `uvm_object_utils(axi4lite_to_apb4_registers_axi4lite_to_apb4_register_map_coverage)

      covergroup ra_cov(string name) with function sample(uvm_reg_addr_t addr, bit is_read);

         option.per_instance = 1;
         option.name = name; 

         ADDR: coverpoint addr {
            bins axi4lite_to_apb4_axi_stat = {'h0};
            bins axi4lite_to_apb4_apb_stat = {'h4};
            bins axi4lite_to_apb4_slv_config = {'h10};
            bins axi4lite_to_apb4_mst_config = {'h20};
            bins axi4lite_to_apb4_sample_config = {'hb60};
            bins axi4lite_to_apb4_sample = {'hbac};
         }

         RW: coverpoint is_read {
            bins RD = {1};
            bins WR = {0};
         }

         ACCESS: cross ADDR, RW {
            ignore_bins read_only  = binsof(ADDR) intersect {'h0, 'h4, 'hbac} && binsof(RW) intersect {0};
         }

      endgroup: ra_cov

      function new(string name = "axi4lite_to_apb4_registers_axi4lite_to_apb4_register_map_coverage");
         ra_cov = new(name);
      endfunction: new

      function void sample(uvm_reg_addr_t offset, bit is_read);
         ra_cov.sample(offset, is_read);
      endfunction: sample

   endclass: axi4lite_to_apb4_registers_axi4lite_to_apb4_register_map_coverage



   //--------------------------------------------------------------------
   // Class: axi4lite_to_apb4_registers
   // 
   //--------------------------------------------------------------------

   class axi4lite_to_apb4_registers extends uvm_reg_block;
      `uvm_object_utils(axi4lite_to_apb4_registers)

      rand axi4lite_to_apb4_axi_stat_reg axi4lite_to_apb4_axi_stat; // AXI Status register
      rand axi4lite_to_apb4_apb_stat_reg axi4lite_to_apb4_apb_stat; // APB Status register
      rand axi4lite_to_apb4_slv_config_reg axi4lite_to_apb4_slv_config; // Slave config register
      rand axi4lite_to_apb4_mst_config_reg axi4lite_to_apb4_mst_config; // Master config register
      rand axi4lite_to_apb4_sample_config_reg axi4lite_to_apb4_sample_config; // Sample config register
      rand axi4lite_to_apb4_sample_reg axi4lite_to_apb4_sample; // Register of samples transactions

      uvm_reg_map axi4lite_to_apb4_register_map; 
      axi4lite_to_apb4_registers_axi4lite_to_apb4_register_map_coverage axi4lite_to_apb4_register_map_cg;


      // Function: new
      // 
      function new(string name = "axi4lite_to_apb4_registers");
         super.new(name, build_coverage(UVM_CVR_ALL));
      endfunction


      // Function: build
      // 
      virtual function void build();

         if(has_coverage(UVM_CVR_ADDR_MAP)) begin
            axi4lite_to_apb4_register_map_cg = axi4lite_to_apb4_registers_axi4lite_to_apb4_register_map_coverage::type_id::create("axi4lite_to_apb4_register_map_cg");
            axi4lite_to_apb4_register_map_cg.ra_cov.set_inst_name(this.get_full_name());
            void'(set_coverage(UVM_CVR_ADDR_MAP));
         end
         axi4lite_to_apb4_axi_stat = axi4lite_to_apb4_axi_stat_reg::type_id::create("axi4lite_to_apb4_axi_stat");
         axi4lite_to_apb4_axi_stat.configure(this, null, "");
         axi4lite_to_apb4_axi_stat.add_hdl_path_slice("wr_cnt_axi4lite_to_apb4_axi_stat", 10, 10);
         axi4lite_to_apb4_axi_stat.add_hdl_path_slice("rd_cnt_axi4lite_to_apb4_axi_stat", 0, 10);
         axi4lite_to_apb4_axi_stat.build();

         axi4lite_to_apb4_apb_stat = axi4lite_to_apb4_apb_stat_reg::type_id::create("axi4lite_to_apb4_apb_stat");
         axi4lite_to_apb4_apb_stat.configure(this, null, "");
         axi4lite_to_apb4_apb_stat.add_hdl_path_slice("rd_cnt_axi4lite_to_apb4_apb_stat", 10, 10);
         axi4lite_to_apb4_apb_stat.add_hdl_path_slice("wr_cnt_axi4lite_to_apb4_apb_stat", 0, 10);
         axi4lite_to_apb4_apb_stat.build();

         axi4lite_to_apb4_slv_config = axi4lite_to_apb4_slv_config_reg::type_id::create("axi4lite_to_apb4_slv_config");
         axi4lite_to_apb4_slv_config.configure(this, null, "");
         axi4lite_to_apb4_slv_config.add_hdl_path_slice("use_merr_resp_axi4lite_to_apb4_slv_config,", 0, 1);
         axi4lite_to_apb4_slv_config.build();

         axi4lite_to_apb4_mst_config = axi4lite_to_apb4_mst_config_reg::type_id::create("axi4lite_to_apb4_mst_config");
         axi4lite_to_apb4_mst_config.configure(this, null, "");
         axi4lite_to_apb4_mst_config.add_hdl_path_slice("wr_rd_ratio_axi4lite_to_apb4_mst_config", 0, 3);
         axi4lite_to_apb4_mst_config.build();

         axi4lite_to_apb4_sample_config = axi4lite_to_apb4_sample_config_reg::type_id::create("axi4lite_to_apb4_sample_config");
         axi4lite_to_apb4_sample_config.configure(this, null, "");
         axi4lite_to_apb4_sample_config.add_hdl_path_slice("waddr_nd_axi4lite_to_apb4_sample_config", 31, 1);
         axi4lite_to_apb4_sample_config.add_hdl_path_slice("waddr_ni_axi4lite_to_apb4_sample_config", 30, 1);
         axi4lite_to_apb4_sample_config.add_hdl_path_slice("waddr_pd_axi4lite_to_apb4_sample_config", 29, 1);
         axi4lite_to_apb4_sample_config.add_hdl_path_slice("waddr_pi_axi4lite_to_apb4_sample_config", 28, 1);
         axi4lite_to_apb4_sample_config.add_hdl_path_slice("wdata_nd_axi4lite_to_apb4_sample_config", 27, 1);
         axi4lite_to_apb4_sample_config.add_hdl_path_slice("wdata_ni_axi4lite_to_apb4_sample_config", 26, 1);
         axi4lite_to_apb4_sample_config.add_hdl_path_slice("wdata_pd_axi4lite_to_apb4_sample_config", 25, 1);
         axi4lite_to_apb4_sample_config.add_hdl_path_slice("wdata_pi_axi4lite_to_apb4_sample_config", 24, 1);
         axi4lite_to_apb4_sample_config.add_hdl_path_slice("raddr_nd_axi4lite_to_apb4_sample_config", 23, 1);
         axi4lite_to_apb4_sample_config.add_hdl_path_slice("raddr_ni_axi4lite_to_apb4_sample_config", 22, 1);
         axi4lite_to_apb4_sample_config.add_hdl_path_slice("raddr_pd_axi4lite_to_apb4_sample_config", 21, 1);
         axi4lite_to_apb4_sample_config.add_hdl_path_slice("raddr_pi_axi4lite_to_apb4_sample_config", 20, 1);
         axi4lite_to_apb4_sample_config.add_hdl_path_slice("rdata_nd_axi4lite_to_apb4_sample_config", 19, 1);
         axi4lite_to_apb4_sample_config.add_hdl_path_slice("rdata_ni_axi4lite_to_apb4_sample_config", 18, 1);
         axi4lite_to_apb4_sample_config.add_hdl_path_slice("rdata_pd_axi4lite_to_apb4_sample_config", 17, 1);
         axi4lite_to_apb4_sample_config.add_hdl_path_slice("rdata_pi_axi4lite_to_apb4_sample_config", 16, 1);
         axi4lite_to_apb4_sample_config.build();

         axi4lite_to_apb4_sample = axi4lite_to_apb4_sample_reg::type_id::create("axi4lite_to_apb4_sample");
         axi4lite_to_apb4_sample.configure(this, null, "");
         axi4lite_to_apb4_sample.add_hdl_path_slice("data_axi4lite_to_apb4_sample", 0, 32);
         axi4lite_to_apb4_sample.build();

         axi4lite_to_apb4_register_map = create_map("axi4lite_to_apb4_register_map", 'h0, 4, UVM_LITTLE_ENDIAN, 1);
         default_map = axi4lite_to_apb4_register_map;

         axi4lite_to_apb4_register_map.add_reg(axi4lite_to_apb4_axi_stat, 'h0, "RC");
         axi4lite_to_apb4_register_map.add_reg(axi4lite_to_apb4_apb_stat, 'h4, "RC");
         axi4lite_to_apb4_register_map.add_reg(axi4lite_to_apb4_slv_config, 'h10, "RW");
         axi4lite_to_apb4_register_map.add_reg(axi4lite_to_apb4_mst_config, 'h20, "RW");
         axi4lite_to_apb4_register_map.add_reg(axi4lite_to_apb4_sample_config, 'hb60, "RW");
         axi4lite_to_apb4_register_map.add_reg(axi4lite_to_apb4_sample, 'hbac, "RO");

         lock_model();
      endfunction


      // Function: sample
      // 
      function void sample(uvm_reg_addr_t offset, bit is_read, uvm_reg_map  map);
         if(get_coverage(UVM_CVR_ADDR_MAP)) begin
            if(map.get_name() == "axi4lite_to_apb4_register_map") begin
               axi4lite_to_apb4_register_map_cg.sample(offset, is_read);
            end
         end
      endfunction: sample

   endclass


endpackage
