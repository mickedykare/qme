//----------------------------------------------------------------------
//   THIS IS AUTOMATICALLY GENERATED CODE
//   Generated by Mentor Graphics' Register Assistant V4.6 (Build 7)
//----------------------------------------------------------------------
// Project         : axi4lite_to_apb4_proj
// File            : /home/mikaela/questa_makefile_environment/qme/examples/axi4lite_to_apb4/rtl/generated_rtl//axi4lite_to_apb4_registers.v
//----------------------------------------------------------------------
// Created by      : mikaela
// Creation Date   : 11 03 2015 08:55::46
//----------------------------------------------------------------------

//----------------------------------------------------------------------
// Block           : axi4lite_to_apb4_registers
// Address Range   : 0xBB0
//----------------------------------------------------------------------
// Block Settings:
//    rtl.BUS_TYPE                 : NONE
//    rtl.CLOCK                    : clk
//    rtl.CLOCK_EDGE               : POSITIVE
//    rtl.DECLARE_INFERRED_SIGNALS : TRUE
//    rtl.DEFAULT_RDATA_NAME       : DEFAULT_RDATA
//    rtl.DEFAULT_RDATA_VALUE      : 0
//    rtl.DEFAULT_SCALAR_INPUT_TYPE: wire
//    rtl.DEFAULT_VECTOR_INPUT_TYPE: wire
//    rtl.LANGUAGE                 : VLOG_2005
//    rtl.RESET                    : nreset
//    rtl.RESET_LEVEL              : LOW
//    rtl.RESET_STYLE              : ASYNC
//----------------------------------------------------------------------

module axi4lite_to_apb4_registers
#(
  parameter ADDR_WIDTH=12,
  parameter DATA_WIDTH=32
)
(
  // FIELD OUTPUT PORTS
  output reg   [9:0]  rd_cnt_axi4lite_to_apb4_axi_stat         ,
  output reg   [9:0]  wr_cnt_axi4lite_to_apb4_axi_stat         ,
  output reg   [9:0]  rd_cnt_axi4lite_to_apb4_apb_stat         ,
  output reg   [9:0]  wr_cnt_axi4lite_to_apb4_apb_stat         ,
  output reg          use_merr_resp_axi4lite_to_apb4_slv_config,
  output reg   [2:0]  wr_rd_ratio_axi4lite_to_apb4_mst_config  ,
  output reg          waddr_nd_axi4lite_to_apb4_sample_config  ,
  output reg          waddr_ni_axi4lite_to_apb4_sample_config  ,
  output reg          waddr_pd_axi4lite_to_apb4_sample_config  ,
  output reg          waddr_pi_axi4lite_to_apb4_sample_config  ,
  output reg          wdata_nd_axi4lite_to_apb4_sample_config  ,
  output reg          wdata_ni_axi4lite_to_apb4_sample_config  ,
  output reg          wdata_pd_axi4lite_to_apb4_sample_config  ,
  output reg          wdata_pi_axi4lite_to_apb4_sample_config  ,
  output reg          raddr_nd_axi4lite_to_apb4_sample_config  ,
  output reg          raddr_ni_axi4lite_to_apb4_sample_config  ,
  output reg          raddr_pd_axi4lite_to_apb4_sample_config  ,
  output reg          raddr_pi_axi4lite_to_apb4_sample_config  ,
  output reg          rdata_nd_axi4lite_to_apb4_sample_config  ,
  output reg          rdata_ni_axi4lite_to_apb4_sample_config  ,
  output reg          rdata_pd_axi4lite_to_apb4_sample_config  ,
  output reg          rdata_pi_axi4lite_to_apb4_sample_config  ,
  output reg   [31:0] data_axi4lite_to_apb4_sample             ,

  // INPUT PORTS
  input wire   [9:0]  rd_cnt_axi4lite_to_apb4_axi_stat_ip         ,
  input wire   [9:0]  wr_cnt_axi4lite_to_apb4_axi_stat_ip         ,
  input wire   [9:0]  rd_cnt_axi4lite_to_apb4_apb_stat_ip         ,
  input wire   [9:0]  wr_cnt_axi4lite_to_apb4_apb_stat_ip         ,
  input wire          use_merr_resp_axi4lite_to_apb4_slv_config_ip,
  input wire   [2:0]  wr_rd_ratio_axi4lite_to_apb4_mst_config_ip  ,
  input wire          waddr_nd_axi4lite_to_apb4_sample_config_ip  ,
  input wire          waddr_ni_axi4lite_to_apb4_sample_config_ip  ,
  input wire          waddr_pd_axi4lite_to_apb4_sample_config_ip  ,
  input wire          waddr_pi_axi4lite_to_apb4_sample_config_ip  ,
  input wire          wdata_nd_axi4lite_to_apb4_sample_config_ip  ,
  input wire          wdata_ni_axi4lite_to_apb4_sample_config_ip  ,
  input wire          wdata_pd_axi4lite_to_apb4_sample_config_ip  ,
  input wire          wdata_pi_axi4lite_to_apb4_sample_config_ip  ,
  input wire          raddr_nd_axi4lite_to_apb4_sample_config_ip  ,
  input wire          raddr_ni_axi4lite_to_apb4_sample_config_ip  ,
  input wire          raddr_pd_axi4lite_to_apb4_sample_config_ip  ,
  input wire          raddr_pi_axi4lite_to_apb4_sample_config_ip  ,
  input wire          rdata_nd_axi4lite_to_apb4_sample_config_ip  ,
  input wire          rdata_ni_axi4lite_to_apb4_sample_config_ip  ,
  input wire          rdata_pd_axi4lite_to_apb4_sample_config_ip  ,
  input wire          rdata_pi_axi4lite_to_apb4_sample_config_ip  ,
  input wire   [31:0] data_axi4lite_to_apb4_sample_ip             ,

  // GENERIC BUS PORTS
  input  wire                  clk     , // Register Bus Clock
  input  wire                  nreset  , // Register Bus Reset
  input  wire [ADDR_WIDTH-1:0] waddr   , // Write Address-Bus
  input  wire [ADDR_WIDTH-1:0] raddr   , // Read Address-Bus
  input  wire [DATA_WIDTH-1:0] wdata   , // Write Data-Bus
  output reg  [DATA_WIDTH-1:0] rdata   , // Read Data-Bus
  input  wire                  rstrobe , // Read-Strobe
  input  wire                  wstrobe , // Write-Strobe
  output reg                   raddrerr, // Read-Address-Error
  output reg                   waddrerr, // Write-Address-Error
  output reg                   wack    , // Write Acknowledge
  output reg                   rack      // Read Acknowledge
);

  // READ/WRITE ENABLE SIGNALS
  reg  ren_axi4lite_to_apb4_axi_stat     ;
  reg  ren_axi4lite_to_apb4_apb_stat     ;
  reg  wen_axi4lite_to_apb4_slv_config   ;
  reg  wen_axi4lite_to_apb4_mst_config   ;
  reg  wen_axi4lite_to_apb4_sample_config;

  // MUX INPUTS FOR EACH REGISTER WITH READ ACCESS
  wire [DATA_WIDTH-1:0] rmux_axi4lite_to_apb4_axi_stat     ;
  wire [DATA_WIDTH-1:0] rmux_axi4lite_to_apb4_apb_stat     ;
  wire [DATA_WIDTH-1:0] rmux_axi4lite_to_apb4_slv_config   ;
  wire [DATA_WIDTH-1:0] rmux_axi4lite_to_apb4_mst_config   ;
  wire [DATA_WIDTH-1:0] rmux_axi4lite_to_apb4_sample_config;
  wire [DATA_WIDTH-1:0] rmux_axi4lite_to_apb4_sample       ;

  // DEFAULT VALUE FOR READ DATA BUS
  localparam DEFAULT_RDATA = 32'h00000000;

  // ADDRESS PARAMETERS
  localparam AXI4LITE_TO_APB4_AXI_STAT_ADDR = 12'h000;
  localparam AXI4LITE_TO_APB4_APB_STAT_ADDR = 12'h004;
  localparam AXI4LITE_TO_APB4_SLV_CONFIG_ADDR = 12'h010;
  localparam AXI4LITE_TO_APB4_MST_CONFIG_ADDR = 12'h020;
  localparam AXI4LITE_TO_APB4_SAMPLE_CONFIG_ADDR = 12'hB60;
  localparam AXI4LITE_TO_APB4_SAMPLE_ADDR = 12'hBAC;


  //----------------------------------------------------------------------
  //                    WRITE ADDRESS DECODE
  //----------------------------------------------------------------------
  always @ ( * )
  begin : write_enable
    wen_axi4lite_to_apb4_slv_config <= 1'b0;
    wen_axi4lite_to_apb4_mst_config <= 1'b0;
    wen_axi4lite_to_apb4_sample_config <= 1'b0;
    waddrerr <= 1'b0;
    wack <= 1'b0;

    if (wstrobe)
    begin
      case (waddr)
        AXI4LITE_TO_APB4_SLV_CONFIG_ADDR:
        begin
          wen_axi4lite_to_apb4_slv_config <= 1'b1;
        end
        AXI4LITE_TO_APB4_MST_CONFIG_ADDR:
        begin
          wen_axi4lite_to_apb4_mst_config <= 1'b1;
        end
        AXI4LITE_TO_APB4_SAMPLE_CONFIG_ADDR:
        begin
          wen_axi4lite_to_apb4_sample_config <= 1'b1;
        end
        default:
        begin
          waddrerr <= 1'b1;
        end
      endcase
      wack <= 1'b1;
    end
  end


  //------------------------------------------------------------
  // Register: axi4lite_to_apb4_axi_stat_reg
  //   AXI Status register
  //   SW Access     : RO-Clear-On-Read
  //   Address Offset: 0x0
  //   HW Access     : read-write
  // 
  // Instance: axi4lite_to_apb4_axi_stat
  //   AXI Status register
  //   Address Offset: 0x000
  //   Reset Value   : 
  // 
  // Fields:
  //   19:10  rd_cnt (SW:RO-Clear-On-Read, HW:read-write)
  //   9:0  wr_cnt (SW:RO-Clear-On-Read, HW:read-write)

  //------------------------------------------------------------
  //   Field: rd_cnt                                        
  //   Width: 10                   , Offset: 10             
  //   SW Access: RO-Clear-On-Read , HW Access: read-write  
  //------------------------------------------------------------
  always @ (posedge clk or negedge nreset)
  begin : reg_axi4lite_to_apb4_axi_stat_reg_rd_cnt_axi4lite_to_apb4_axi_stat
    // Reset
    if ( !nreset )
      rd_cnt_axi4lite_to_apb4_axi_stat <= 10'h000;
    // SW:RO-Clear-On-Read
    else if (ren_axi4lite_to_apb4_axi_stat)
      rd_cnt_axi4lite_to_apb4_axi_stat <= 10'b0000000000;
    // HW:read-write
    else
      rd_cnt_axi4lite_to_apb4_axi_stat <= rd_cnt_axi4lite_to_apb4_axi_stat_ip;
  end

  //------------------------------------------------------------
  //   Field: wr_cnt                                        
  //   Width: 10                   , Offset: 0              
  //   SW Access: RO-Clear-On-Read , HW Access: read-write  
  //------------------------------------------------------------
  always @ (posedge clk or negedge nreset)
  begin : reg_axi4lite_to_apb4_axi_stat_reg_wr_cnt_axi4lite_to_apb4_axi_stat
    // Reset
    if ( !nreset )
      wr_cnt_axi4lite_to_apb4_axi_stat <= 10'h000;
    // SW:RO-Clear-On-Read
    else if (ren_axi4lite_to_apb4_axi_stat)
      wr_cnt_axi4lite_to_apb4_axi_stat <= 10'b0000000000;
    // HW:read-write
    else
      wr_cnt_axi4lite_to_apb4_axi_stat <= wr_cnt_axi4lite_to_apb4_axi_stat_ip;
  end


  //------------------------------------------------------------
  // Register: axi4lite_to_apb4_apb_stat_reg
  //   APB Status register
  //   SW Access     : RO-Clear-On-Read
  //   Address Offset: 0x004
  //   HW Access     : read-write
  // 
  // Instance: axi4lite_to_apb4_apb_stat
  //   APB Status register
  //   Address Offset: 0x004
  //   Reset Value   : 
  // 
  // Fields:
  //   19:10  rd_cnt (SW:RO-Clear-On-Read, HW:read-write)
  //   9:0  wr_cnt (SW:RO-Clear-On-Read, HW:read-write)

  //------------------------------------------------------------
  //   Field: rd_cnt                                        
  //   Width: 10                   , Offset: 10             
  //   SW Access: RO-Clear-On-Read , HW Access: read-write  
  //------------------------------------------------------------
  always @ (posedge clk or negedge nreset)
  begin : reg_axi4lite_to_apb4_apb_stat_reg_rd_cnt_axi4lite_to_apb4_apb_stat
    // Reset
    if ( !nreset )
      rd_cnt_axi4lite_to_apb4_apb_stat <= 10'h000;
    // SW:RO-Clear-On-Read
    else if (ren_axi4lite_to_apb4_apb_stat)
      rd_cnt_axi4lite_to_apb4_apb_stat <= 10'b0000000000;
    // HW:read-write
    else
      rd_cnt_axi4lite_to_apb4_apb_stat <= rd_cnt_axi4lite_to_apb4_apb_stat_ip;
  end

  //------------------------------------------------------------
  //   Field: wr_cnt                                        
  //   Width: 10                   , Offset: 0              
  //   SW Access: RO-Clear-On-Read , HW Access: read-write  
  //------------------------------------------------------------
  always @ (posedge clk or negedge nreset)
  begin : reg_axi4lite_to_apb4_apb_stat_reg_wr_cnt_axi4lite_to_apb4_apb_stat
    // Reset
    if ( !nreset )
      wr_cnt_axi4lite_to_apb4_apb_stat <= 10'h000;
    // SW:RO-Clear-On-Read
    else if (ren_axi4lite_to_apb4_apb_stat)
      wr_cnt_axi4lite_to_apb4_apb_stat <= 10'b0000000000;
    // HW:read-write
    else
      wr_cnt_axi4lite_to_apb4_apb_stat <= wr_cnt_axi4lite_to_apb4_apb_stat_ip;
  end


  //------------------------------------------------------------
  // Register: axi4lite_to_apb4_slv_config_reg
  //   Slave config register
  //   SW Access     : read-write
  //   Address Offset: 0x010
  //   HW Access     : read-write
  // 
  // Instance: axi4lite_to_apb4_slv_config
  //   Slave config register
  //   Address Offset: 0x010
  //   Reset Value   : 
  // 
  // Fields:
  //     0  use_merr_resp (SW:read-write, HW:read-write)

  //------------------------------------------------------------
  //   Field: use_merr_resp                           
  //   Width: 1              , Offset: 0              
  //   SW Access: read-write , HW Access: read-write  
  //------------------------------------------------------------
  always @ (posedge clk or negedge nreset)
  begin : reg_axi4lite_to_apb4_slv_config_reg_use_merr_resp_axi4lite_to_apb4_slv_config
    // Reset
    if ( !nreset )
      use_merr_resp_axi4lite_to_apb4_slv_config <= 1'b0;
    // SW:read-write
    else if (wen_axi4lite_to_apb4_slv_config)
      use_merr_resp_axi4lite_to_apb4_slv_config <= wdata[0];
    // HW:read-write
    else
      use_merr_resp_axi4lite_to_apb4_slv_config <= use_merr_resp_axi4lite_to_apb4_slv_config_ip;
  end


  //------------------------------------------------------------
  // Register: axi4lite_to_apb4_mst_config_reg
  //   Master config register
  //   SW Access     : read-write
  //   Address Offset: 0x020
  //   HW Access     : read-write
  // 
  // Instance: axi4lite_to_apb4_mst_config
  //   Master config register
  //   Address Offset: 0x020
  //   Reset Value   : 
  // 
  // Fields:
  //   2:0  wr_rd_ratio (SW:read-write, HW:read-write)

  //------------------------------------------------------------
  //   Field: wr_rd_ratio                             
  //   Width: 3              , Offset: 0              
  //   SW Access: read-write , HW Access: read-write  
  //------------------------------------------------------------
  always @ (posedge clk or negedge nreset)
  begin : reg_axi4lite_to_apb4_mst_config_reg_wr_rd_ratio_axi4lite_to_apb4_mst_config
    // Reset
    if ( !nreset )
      wr_rd_ratio_axi4lite_to_apb4_mst_config <= 3'b000;
    // SW:read-write
    else if (wen_axi4lite_to_apb4_mst_config)
      wr_rd_ratio_axi4lite_to_apb4_mst_config <= wdata[2:0];
    // HW:read-write
    else
      wr_rd_ratio_axi4lite_to_apb4_mst_config <= wr_rd_ratio_axi4lite_to_apb4_mst_config_ip;
  end


  //------------------------------------------------------------
  // Register: axi4lite_to_apb4_sample_config_reg
  //   Sample config register
  //   SW Access     : read-write
  //   Address Offset: 0xB60
  //   HW Access     : read-write
  // 
  // Instance: axi4lite_to_apb4_sample_config
  //   Sample config register
  //   Address Offset: 0xB60
  //   Reset Value   : 
  // 
  // Fields:
  //     31  waddr_nd (SW:read-write, HW:read-write)
  //     30  waddr_ni (SW:read-write, HW:read-write)
  //     29  waddr_pd (SW:read-write, HW:read-write)
  //     28  waddr_pi (SW:read-write, HW:read-write)
  //     27  wdata_nd (SW:read-write, HW:read-write)
  //     26  wdata_ni (SW:read-write, HW:read-write)
  //     25  wdata_pd (SW:read-write, HW:read-write)
  //     24  wdata_pi (SW:read-write, HW:read-write)
  //     23  raddr_nd (SW:read-write, HW:read-write)
  //     22  raddr_ni (SW:read-write, HW:read-write)
  //     21  raddr_pd (SW:read-write, HW:read-write)
  //     20  raddr_pi (SW:read-write, HW:read-write)
  //     19  rdata_nd (SW:read-write, HW:read-write)
  //     18  rdata_ni (SW:read-write, HW:read-write)
  //     17  rdata_pd (SW:read-write, HW:read-write)
  //     16  rdata_pi (SW:read-write, HW:read-write)

  //------------------------------------------------------------
  //   Field: waddr_nd                                
  //   Width: 1              , Offset: 31             
  //   SW Access: read-write , HW Access: read-write  
  //------------------------------------------------------------
  //   sample waddr normal data
  //
  always @ (posedge clk or negedge nreset)
  begin : reg_axi4lite_to_apb4_sample_config_reg_waddr_nd_axi4lite_to_apb4_sample_config
    // Reset
    if ( !nreset )
      waddr_nd_axi4lite_to_apb4_sample_config <= 1'b0;
    // SW:read-write
    else if (wen_axi4lite_to_apb4_sample_config)
      waddr_nd_axi4lite_to_apb4_sample_config <= wdata[31];
    // HW:read-write
    else
      waddr_nd_axi4lite_to_apb4_sample_config <= waddr_nd_axi4lite_to_apb4_sample_config_ip;
  end

  //------------------------------------------------------------
  //   Field: waddr_ni                                
  //   Width: 1              , Offset: 30             
  //   SW Access: read-write , HW Access: read-write  
  //------------------------------------------------------------
  //   sample waddr normal instr
  //
  always @ (posedge clk or negedge nreset)
  begin : reg_axi4lite_to_apb4_sample_config_reg_waddr_ni_axi4lite_to_apb4_sample_config
    // Reset
    if ( !nreset )
      waddr_ni_axi4lite_to_apb4_sample_config <= 1'b0;
    // SW:read-write
    else if (wen_axi4lite_to_apb4_sample_config)
      waddr_ni_axi4lite_to_apb4_sample_config <= wdata[30];
    // HW:read-write
    else
      waddr_ni_axi4lite_to_apb4_sample_config <= waddr_ni_axi4lite_to_apb4_sample_config_ip;
  end

  //------------------------------------------------------------
  //   Field: waddr_pd                                
  //   Width: 1              , Offset: 29             
  //   SW Access: read-write , HW Access: read-write  
  //------------------------------------------------------------
  //   sample waddr privileged data
  //
  always @ (posedge clk or negedge nreset)
  begin : reg_axi4lite_to_apb4_sample_config_reg_waddr_pd_axi4lite_to_apb4_sample_config
    // Reset
    if ( !nreset )
      waddr_pd_axi4lite_to_apb4_sample_config <= 1'b0;
    // SW:read-write
    else if (wen_axi4lite_to_apb4_sample_config)
      waddr_pd_axi4lite_to_apb4_sample_config <= wdata[29];
    // HW:read-write
    else
      waddr_pd_axi4lite_to_apb4_sample_config <= waddr_pd_axi4lite_to_apb4_sample_config_ip;
  end

  //------------------------------------------------------------
  //   Field: waddr_pi                                
  //   Width: 1              , Offset: 28             
  //   SW Access: read-write , HW Access: read-write  
  //------------------------------------------------------------
  //   sample waddr privileged instr
  //
  always @ (posedge clk or negedge nreset)
  begin : reg_axi4lite_to_apb4_sample_config_reg_waddr_pi_axi4lite_to_apb4_sample_config
    // Reset
    if ( !nreset )
      waddr_pi_axi4lite_to_apb4_sample_config <= 1'b0;
    // SW:read-write
    else if (wen_axi4lite_to_apb4_sample_config)
      waddr_pi_axi4lite_to_apb4_sample_config <= wdata[28];
    // HW:read-write
    else
      waddr_pi_axi4lite_to_apb4_sample_config <= waddr_pi_axi4lite_to_apb4_sample_config_ip;
  end

  //------------------------------------------------------------
  //   Field: wdata_nd                                
  //   Width: 1              , Offset: 27             
  //   SW Access: read-write , HW Access: read-write  
  //------------------------------------------------------------
  //   sample wdata normal data
  //
  always @ (posedge clk or negedge nreset)
  begin : reg_axi4lite_to_apb4_sample_config_reg_wdata_nd_axi4lite_to_apb4_sample_config
    // Reset
    if ( !nreset )
      wdata_nd_axi4lite_to_apb4_sample_config <= 1'b0;
    // SW:read-write
    else if (wen_axi4lite_to_apb4_sample_config)
      wdata_nd_axi4lite_to_apb4_sample_config <= wdata[27];
    // HW:read-write
    else
      wdata_nd_axi4lite_to_apb4_sample_config <= wdata_nd_axi4lite_to_apb4_sample_config_ip;
  end

  //------------------------------------------------------------
  //   Field: wdata_ni                                
  //   Width: 1              , Offset: 26             
  //   SW Access: read-write , HW Access: read-write  
  //------------------------------------------------------------
  //   sample wdata normal instr
  //
  always @ (posedge clk or negedge nreset)
  begin : reg_axi4lite_to_apb4_sample_config_reg_wdata_ni_axi4lite_to_apb4_sample_config
    // Reset
    if ( !nreset )
      wdata_ni_axi4lite_to_apb4_sample_config <= 1'b0;
    // SW:read-write
    else if (wen_axi4lite_to_apb4_sample_config)
      wdata_ni_axi4lite_to_apb4_sample_config <= wdata[26];
    // HW:read-write
    else
      wdata_ni_axi4lite_to_apb4_sample_config <= wdata_ni_axi4lite_to_apb4_sample_config_ip;
  end

  //------------------------------------------------------------
  //   Field: wdata_pd                                
  //   Width: 1              , Offset: 25             
  //   SW Access: read-write , HW Access: read-write  
  //------------------------------------------------------------
  //   sample wdata privileged data
  //
  always @ (posedge clk or negedge nreset)
  begin : reg_axi4lite_to_apb4_sample_config_reg_wdata_pd_axi4lite_to_apb4_sample_config
    // Reset
    if ( !nreset )
      wdata_pd_axi4lite_to_apb4_sample_config <= 1'b0;
    // SW:read-write
    else if (wen_axi4lite_to_apb4_sample_config)
      wdata_pd_axi4lite_to_apb4_sample_config <= wdata[25];
    // HW:read-write
    else
      wdata_pd_axi4lite_to_apb4_sample_config <= wdata_pd_axi4lite_to_apb4_sample_config_ip;
  end

  //------------------------------------------------------------
  //   Field: wdata_pi                                
  //   Width: 1              , Offset: 24             
  //   SW Access: read-write , HW Access: read-write  
  //------------------------------------------------------------
  //   sample wdata privileged instr
  //
  always @ (posedge clk or negedge nreset)
  begin : reg_axi4lite_to_apb4_sample_config_reg_wdata_pi_axi4lite_to_apb4_sample_config
    // Reset
    if ( !nreset )
      wdata_pi_axi4lite_to_apb4_sample_config <= 1'b0;
    // SW:read-write
    else if (wen_axi4lite_to_apb4_sample_config)
      wdata_pi_axi4lite_to_apb4_sample_config <= wdata[24];
    // HW:read-write
    else
      wdata_pi_axi4lite_to_apb4_sample_config <= wdata_pi_axi4lite_to_apb4_sample_config_ip;
  end

  //------------------------------------------------------------
  //   Field: raddr_nd                                
  //   Width: 1              , Offset: 23             
  //   SW Access: read-write , HW Access: read-write  
  //------------------------------------------------------------
  //   sample raddr normal data
  //
  always @ (posedge clk or negedge nreset)
  begin : reg_axi4lite_to_apb4_sample_config_reg_raddr_nd_axi4lite_to_apb4_sample_config
    // Reset
    if ( !nreset )
      raddr_nd_axi4lite_to_apb4_sample_config <= 1'b0;
    // SW:read-write
    else if (wen_axi4lite_to_apb4_sample_config)
      raddr_nd_axi4lite_to_apb4_sample_config <= wdata[23];
    // HW:read-write
    else
      raddr_nd_axi4lite_to_apb4_sample_config <= raddr_nd_axi4lite_to_apb4_sample_config_ip;
  end

  //------------------------------------------------------------
  //   Field: raddr_ni                                
  //   Width: 1              , Offset: 22             
  //   SW Access: read-write , HW Access: read-write  
  //------------------------------------------------------------
  //   sample raddr normal instr
  //
  always @ (posedge clk or negedge nreset)
  begin : reg_axi4lite_to_apb4_sample_config_reg_raddr_ni_axi4lite_to_apb4_sample_config
    // Reset
    if ( !nreset )
      raddr_ni_axi4lite_to_apb4_sample_config <= 1'b0;
    // SW:read-write
    else if (wen_axi4lite_to_apb4_sample_config)
      raddr_ni_axi4lite_to_apb4_sample_config <= wdata[22];
    // HW:read-write
    else
      raddr_ni_axi4lite_to_apb4_sample_config <= raddr_ni_axi4lite_to_apb4_sample_config_ip;
  end

  //------------------------------------------------------------
  //   Field: raddr_pd                                
  //   Width: 1              , Offset: 21             
  //   SW Access: read-write , HW Access: read-write  
  //------------------------------------------------------------
  //   sample raddr privileged data
  //
  always @ (posedge clk or negedge nreset)
  begin : reg_axi4lite_to_apb4_sample_config_reg_raddr_pd_axi4lite_to_apb4_sample_config
    // Reset
    if ( !nreset )
      raddr_pd_axi4lite_to_apb4_sample_config <= 1'b0;
    // SW:read-write
    else if (wen_axi4lite_to_apb4_sample_config)
      raddr_pd_axi4lite_to_apb4_sample_config <= wdata[21];
    // HW:read-write
    else
      raddr_pd_axi4lite_to_apb4_sample_config <= raddr_pd_axi4lite_to_apb4_sample_config_ip;
  end

  //------------------------------------------------------------
  //   Field: raddr_pi                                
  //   Width: 1              , Offset: 20             
  //   SW Access: read-write , HW Access: read-write  
  //------------------------------------------------------------
  //   sample raddr privileged instr
  //
  always @ (posedge clk or negedge nreset)
  begin : reg_axi4lite_to_apb4_sample_config_reg_raddr_pi_axi4lite_to_apb4_sample_config
    // Reset
    if ( !nreset )
      raddr_pi_axi4lite_to_apb4_sample_config <= 1'b0;
    // SW:read-write
    else if (wen_axi4lite_to_apb4_sample_config)
      raddr_pi_axi4lite_to_apb4_sample_config <= wdata[20];
    // HW:read-write
    else
      raddr_pi_axi4lite_to_apb4_sample_config <= raddr_pi_axi4lite_to_apb4_sample_config_ip;
  end

  //------------------------------------------------------------
  //   Field: rdata_nd                                
  //   Width: 1              , Offset: 19             
  //   SW Access: read-write , HW Access: read-write  
  //------------------------------------------------------------
  //   sample rdata normal data
  //
  always @ (posedge clk or negedge nreset)
  begin : reg_axi4lite_to_apb4_sample_config_reg_rdata_nd_axi4lite_to_apb4_sample_config
    // Reset
    if ( !nreset )
      rdata_nd_axi4lite_to_apb4_sample_config <= 1'b0;
    // SW:read-write
    else if (wen_axi4lite_to_apb4_sample_config)
      rdata_nd_axi4lite_to_apb4_sample_config <= wdata[19];
    // HW:read-write
    else
      rdata_nd_axi4lite_to_apb4_sample_config <= rdata_nd_axi4lite_to_apb4_sample_config_ip;
  end

  //------------------------------------------------------------
  //   Field: rdata_ni                                
  //   Width: 1              , Offset: 18             
  //   SW Access: read-write , HW Access: read-write  
  //------------------------------------------------------------
  //   sample rdata normal instr
  //
  always @ (posedge clk or negedge nreset)
  begin : reg_axi4lite_to_apb4_sample_config_reg_rdata_ni_axi4lite_to_apb4_sample_config
    // Reset
    if ( !nreset )
      rdata_ni_axi4lite_to_apb4_sample_config <= 1'b0;
    // SW:read-write
    else if (wen_axi4lite_to_apb4_sample_config)
      rdata_ni_axi4lite_to_apb4_sample_config <= wdata[18];
    // HW:read-write
    else
      rdata_ni_axi4lite_to_apb4_sample_config <= rdata_ni_axi4lite_to_apb4_sample_config_ip;
  end

  //------------------------------------------------------------
  //   Field: rdata_pd                                
  //   Width: 1              , Offset: 17             
  //   SW Access: read-write , HW Access: read-write  
  //------------------------------------------------------------
  //   sample rdata privileged data
  //
  always @ (posedge clk or negedge nreset)
  begin : reg_axi4lite_to_apb4_sample_config_reg_rdata_pd_axi4lite_to_apb4_sample_config
    // Reset
    if ( !nreset )
      rdata_pd_axi4lite_to_apb4_sample_config <= 1'b0;
    // SW:read-write
    else if (wen_axi4lite_to_apb4_sample_config)
      rdata_pd_axi4lite_to_apb4_sample_config <= wdata[17];
    // HW:read-write
    else
      rdata_pd_axi4lite_to_apb4_sample_config <= rdata_pd_axi4lite_to_apb4_sample_config_ip;
  end

  //------------------------------------------------------------
  //   Field: rdata_pi                                
  //   Width: 1              , Offset: 16             
  //   SW Access: read-write , HW Access: read-write  
  //------------------------------------------------------------
  //   sample rdata privileged instr
  //
  always @ (posedge clk or negedge nreset)
  begin : reg_axi4lite_to_apb4_sample_config_reg_rdata_pi_axi4lite_to_apb4_sample_config
    // Reset
    if ( !nreset )
      rdata_pi_axi4lite_to_apb4_sample_config <= 1'b0;
    // SW:read-write
    else if (wen_axi4lite_to_apb4_sample_config)
      rdata_pi_axi4lite_to_apb4_sample_config <= wdata[16];
    // HW:read-write
    else
      rdata_pi_axi4lite_to_apb4_sample_config <= rdata_pi_axi4lite_to_apb4_sample_config_ip;
  end


  //------------------------------------------------------------
  // Register: axi4lite_to_apb4_sample_reg
  //   Register of samples transactions
  //   SW Access     : read-only
  //   Address Offset: 0xBAC
  //   HW Access     : read-write
  // 
  // Instance: axi4lite_to_apb4_sample
  //   Register of samples transactions
  //   Address Offset: 0xBAC
  //   Reset Value   : 
  // 
  // Fields:
  //   31:0  data (SW:read-only, HW:read-write)

  //------------------------------------------------------------
  //   Field: data                                   
  //   Width: 32            , Offset: 0              
  //   SW Access: read-only , HW Access: read-write  
  //------------------------------------------------------------
  //   Sample data
  //
  always @ (posedge clk or negedge nreset)
  begin : reg_axi4lite_to_apb4_sample_reg_data_axi4lite_to_apb4_sample
    // Reset
    if ( !nreset )
      data_axi4lite_to_apb4_sample <= 32'h00000000;
    // HW:read-write
    else
      data_axi4lite_to_apb4_sample <= data_axi4lite_to_apb4_sample_ip;
  end


  //----------------------------------------------------------------------
  //                    READ BUS MULTIPLEXER
  //----------------------------------------------------------------------
  assign rmux_axi4lite_to_apb4_axi_stat[31:20] = DEFAULT_RDATA[31:20]; // Default read value for un-assigned portion
  assign rmux_axi4lite_to_apb4_axi_stat[19:10] = rd_cnt_axi4lite_to_apb4_axi_stat;
  assign rmux_axi4lite_to_apb4_axi_stat[9:0] = wr_cnt_axi4lite_to_apb4_axi_stat;

  assign rmux_axi4lite_to_apb4_apb_stat[31:20] = DEFAULT_RDATA[31:20]; // Default read value for un-assigned portion
  assign rmux_axi4lite_to_apb4_apb_stat[19:10] = rd_cnt_axi4lite_to_apb4_apb_stat;
  assign rmux_axi4lite_to_apb4_apb_stat[9:0] = wr_cnt_axi4lite_to_apb4_apb_stat;

  assign rmux_axi4lite_to_apb4_slv_config[31:1] = DEFAULT_RDATA[31:1]; // Default read value for un-assigned portion
  assign rmux_axi4lite_to_apb4_slv_config[0] = use_merr_resp_axi4lite_to_apb4_slv_config;

  assign rmux_axi4lite_to_apb4_mst_config[31:3] = DEFAULT_RDATA[31:3]; // Default read value for un-assigned portion
  assign rmux_axi4lite_to_apb4_mst_config[2:0] = wr_rd_ratio_axi4lite_to_apb4_mst_config;

  assign rmux_axi4lite_to_apb4_sample_config[15:0] = DEFAULT_RDATA[15:0]; // Default read value for un-assigned portion
  assign rmux_axi4lite_to_apb4_sample_config[31] = waddr_nd_axi4lite_to_apb4_sample_config;
  assign rmux_axi4lite_to_apb4_sample_config[30] = waddr_ni_axi4lite_to_apb4_sample_config;
  assign rmux_axi4lite_to_apb4_sample_config[29] = waddr_pd_axi4lite_to_apb4_sample_config;
  assign rmux_axi4lite_to_apb4_sample_config[28] = waddr_pi_axi4lite_to_apb4_sample_config;
  assign rmux_axi4lite_to_apb4_sample_config[27] = wdata_nd_axi4lite_to_apb4_sample_config;
  assign rmux_axi4lite_to_apb4_sample_config[26] = wdata_ni_axi4lite_to_apb4_sample_config;
  assign rmux_axi4lite_to_apb4_sample_config[25] = wdata_pd_axi4lite_to_apb4_sample_config;
  assign rmux_axi4lite_to_apb4_sample_config[24] = wdata_pi_axi4lite_to_apb4_sample_config;
  assign rmux_axi4lite_to_apb4_sample_config[23] = raddr_nd_axi4lite_to_apb4_sample_config;
  assign rmux_axi4lite_to_apb4_sample_config[22] = raddr_ni_axi4lite_to_apb4_sample_config;
  assign rmux_axi4lite_to_apb4_sample_config[21] = raddr_pd_axi4lite_to_apb4_sample_config;
  assign rmux_axi4lite_to_apb4_sample_config[20] = raddr_pi_axi4lite_to_apb4_sample_config;
  assign rmux_axi4lite_to_apb4_sample_config[19] = rdata_nd_axi4lite_to_apb4_sample_config;
  assign rmux_axi4lite_to_apb4_sample_config[18] = rdata_ni_axi4lite_to_apb4_sample_config;
  assign rmux_axi4lite_to_apb4_sample_config[17] = rdata_pd_axi4lite_to_apb4_sample_config;
  assign rmux_axi4lite_to_apb4_sample_config[16] = rdata_pi_axi4lite_to_apb4_sample_config;

  assign rmux_axi4lite_to_apb4_sample = data_axi4lite_to_apb4_sample;

  always @ ( * )
  begin : read_bus_mux
    // PUT REGISTER VALUE ON READ DATA BUS
    ren_axi4lite_to_apb4_axi_stat = 1'b0;
    ren_axi4lite_to_apb4_apb_stat = 1'b0;
    rack = 1'b0;
    raddrerr = 1'b0;
    if (rstrobe )
    begin
      case (raddr )
        AXI4LITE_TO_APB4_AXI_STAT_ADDR:
        begin
          rdata = rmux_axi4lite_to_apb4_axi_stat;
          ren_axi4lite_to_apb4_axi_stat = 1'b1;
        end
        AXI4LITE_TO_APB4_APB_STAT_ADDR:
        begin
          rdata = rmux_axi4lite_to_apb4_apb_stat;
          ren_axi4lite_to_apb4_apb_stat = 1'b1;
        end
        AXI4LITE_TO_APB4_SLV_CONFIG_ADDR:
        begin
          rdata = rmux_axi4lite_to_apb4_slv_config;
        end
        AXI4LITE_TO_APB4_MST_CONFIG_ADDR:
        begin
          rdata = rmux_axi4lite_to_apb4_mst_config;
        end
        AXI4LITE_TO_APB4_SAMPLE_CONFIG_ADDR:
        begin
          rdata = rmux_axi4lite_to_apb4_sample_config;
        end
        AXI4LITE_TO_APB4_SAMPLE_ADDR:
        begin
          rdata = rmux_axi4lite_to_apb4_sample;
        end
        default:
        begin
          rdata =  DEFAULT_RDATA;
          raddrerr =  1'b1;
        end
      endcase
      rack = 1'b1;
    end
    else
      begin
        rdata =  DEFAULT_RDATA;
      end
  end
endmodule

