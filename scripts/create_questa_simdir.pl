#!/usr/bin/perl -w
# *************************************************************************************
# create_questa_simdir.pl
# Questa Makefile Environment
#
# Copyright 2014 Mentor Graphics Corporation
# All Rights Reserved
#
# THIS WORK CONTAINS TRADE SECRET AND PROPRIETARY INFORMATION WHICH IS THE PROPERTY OF
# MENTOR GRAPHICS CORPORATION OR ITS LICENSORS AND IS SUBJECT TO LICENSE TERMS
#
# bugs, enhancment requests to: Mikael_Andersson@mentor.com
# ************************************************************************************

use strict;
use Getopt::Long;
use Term::ANSIColor;
use File::Basename;
use Cwd;

my $block="";
my $parent;
my $simdir="";
my $projhome;
my $force=0;
my $help=0;
my $version=0;
my $scratchdir=$ENV{'QME_SCRATCH_HOME'};
my $simsettingsdir=$ENV{'QME_SIM_SETTINGS_DIR'};
my $makefile = $ENV{'QME_HOME'}."/"."templates/Makefile.template";
my $block_overrides;
my $simdir_fp;
my $srchome=$ENV{'QME_PROJECT_HOME'}."/";
my $qme_version=`cd $ENV{'QME_HOME'};git describe --tags`;
chomp $qme_version;
# Functions
sub print_note{
    my $string=pop;
    print color "green";
    print "Note: $string\n";
    print color "reset";
}
sub print_error{
    my $string=pop;
    print color "bold red";
    print "ERROR: $string\n";
    print color "reset";
}

sub print_warning{
    my $string=pop;
    print color "dark red";
    print "Warning: $string\n";
    print color "reset";
}
sub system_cmd{
    my $cmd = pop;
    my $status;
    $status=system($cmd);
    &check_syscmd($status);
}



sub check_syscmd {
    my $return_status = $_[0];
    if ($return_status != 0) { 
        my $error_msg = "system call ended with exit status = $return_status.";
	&print_error($error_msg);
	exit(1);
    }
}

sub copy_to{
    my $d = pop;
    my $s = pop;
    &print_note("Copying $s to $d");
    &system_cmd("cp -f $s $d");
}


#update_makefile(makefile.tmpl,makefile)
sub update_makefile{
    my $outfile = pop;
    my $infile=pop;


    open FILE, $infile or die $!;
    my @indata = <FILE>;
    my $tmp;
    close FILE;
    open FILE, ">$outfile" or die $!;

    foreach (@indata) {
	s/___REPLACE_THIS_BLOCKNAME/$block/;
	s/___REPLACE_THIS_BLOCK_OVERRIDES/$block_overrides/;
	s/___REPLACE_THIS_SRCHOME/$srchome/;
	s/___REPLACE_THIS_QME_VERSION/$qme_version/;
	s/^# Makefile.template/\# Autogenerated Makefile ($qme_version)/;
	print FILE "$_";
    }
    close FILE;

}







my $usage = <<END;
Version:$qme_version 

 Usage: $0 [options] --name=<simdir name> --block=<blockname>
  Options:
    --help, -h                            This text
    --simdir=<name> ,-s=<name>            Specifices the name of the simulation dir
    --parent=<name>,-p=<name>             If you are using a subblock in the library tree
    --block=<block>,-b=<block>            Specifices then name of the block that we want to simulate
    --force,-f                            Force overwrite of files in the simdir
    --location,-l=<scratch home>          If you want to specify your own location of your simulation directory
    --version,-v                          Display version of QME
END



GetOptions ("block=s" => \$block,   
	    'help|usage|h' => \$help,
	    "parent=s"   => \$parent,
	    'location=s' => \$scratchdir,
	    "simdir=s" => \$simdir,   
            "force" => \$force,
            "version" => \$version)
    or die("Error in command line arguments\n");

if ($help) {
    print color "red";
    print $usage;
    print color "reset";
    exit 0;
}

if ($version) {
    &print_note("You are using $qme_version");
    exit 0;
}

if ($simdir eq "") {
    die $usage;
}
if ($block eq "") {
    die $usage;
}

$block_overrides=$srchome.$block."/sim/Makefile.block.defaults";

&print_note("#################### Questa Makefile Environment (QME) ######################");
&print_note("# Version:$qme_version located at $ENV{'QME_HOME'}");
&print_note("# This environment is developed by Mikael Andersson, Mentor Graphics");
&print_note("# Documentation can be found at: http://www.github.com/detstorabla/qme");
&print_note("#############################################################################");

## Check environment variables
if (-e $ENV{'QME_HOME'}) {
    &print_note("Checking Environment Variable QME_HOME (OK)");
} else {
    die("Please check QME_HOME($ENV{'QME_HOME'}) (ERROR)");
}


if (-e $ENV{'QME_PROJECT_HOME'}) {
    &print_note("Checking Environment Variable QME_PROJECT_HOME (OK)");
    $projhome=$ENV{'QME_PROJECT_HOME'};
} else {
    die("Please check QME_PROJECT_HOME (ERROR)");
}

if (-e $ENV{'QME_SCRATCH_HOME'}) {
    &print_note("Checking Environment Variable QME_SCRATCH_HOME (OK)");
} else {
    die("Please check QME_SCRATCH_HOME($ENV{'QME_SCRATCH_HOME'}) (ERROR)");
}

if (-e $ENV{'QUESTA_HOME'}) {
    &print_note("Checking Environment Variable QUESTA_HOME (OK)");
} else {
    die("Please set QUESTA_HOME to point to the location of Questasim (ERROR)");
}

if (-e $ENV{'QUESTA_MVC_HOME'}) {
    &print_note("Checking Environment Variable QUESTA_MVC_HOME (OK)");
} else {
    &print_warning("Please set QUESTA_MVC_HOME to point to the location of Questa Vip if you intend to use any");
}

if (-e $ENV{'HOME_0IN'}) {
    &print_note("Checking Environment Variable HOME_0IN (OK)");
} else {
    &print_warning("Please set HOME_0IN to point to the location of Questa Formal tools if you intend to use any of that technology");
}

if ($qme_version =~/QME_/) {
    &print_note("Looks like git is installed (OK)");
} else {
    &print_warning("Unable to detect version of QME /$qme_version). Please check that git is installed");
}





# For simplicity all blocks are considered to be on the same level
if (-e $projhome."/".$block) {
    &print_note("Checking that $projhome/$block exists (OK)");
} else {
    die("Please check either QME_PROJECT_HOME($projhome) or BLOCK name($block)");
}

## We assume that there is a sim directory where all 
## block settings actually exists. This directory is defined by 
if (-e $projhome."/".$block."/".$simsettingsdir) {
    &print_note("Checking that $projhome/$block/$simsettingsdir exists (OK)");
} else {
    &print_note("Checking that $projhome/$block/$simsettingsdir exists (ERROR)");
    die("Please check either QME_SIM_SETTINGS_DIR ($simsettingsdir)");
}

## Check if Makefile.block.defaults exists.
my $block_defaults=$projhome."/".$block."/".$simsettingsdir."/"."Makefile.block.defaults";
if (-e $block_defaults) {
    &print_note("Checking that $block_defaults exists (OK)");
} else {
    &print_warning("$block_defaults does not exist - creating one...");
    &system_cmd("touch $block_defaults");
}

if (-e $scratchdir) {
    &print_note("Checking that $scratchdir exists (OK)");
} else {
    die("Error: $scratchdir do not exist");
}


    $simdir_fp=$scratchdir."/".$simdir;



if (-e $simdir_fp) {
    if ($force == 0) {
    die("Error: $simdir_fp already exists, add --force/-f to overwrite Makefile");
    } else {
    &print_note("Overwriting Makefile in $simdir_fp");

    }

} else {
    &print_note("Checking that $simdir_fp does not exists (OK)");
    &print_note("Creating $simdir_fp");
    &system_cmd("mkdir -p $simdir_fp");
}

# Copy some needed files to the simulation directory

my $destination= $simdir_fp."/"."Makefile";
&print_note("Creating $destination");
&update_makefile($makefile,$destination);
print "cd $simdir_fp\n";

