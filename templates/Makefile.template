# *************************************************************************************
# Makefile.template
# Questa Makefile Environment
# 
# Copyright 2014 Mentor Graphics Corporation
# All Rights Reserved
#
# THIS WORK CONTAINS TRADE SECRET AND PROPRIETARY INFORMATION WHICH IS THE PROPERTY OF
# MENTOR GRAPHICS CORPORATION OR ITS LICENSORS AND IS SUBJECT TO LICENSE TERMS
#
# bugs, enhancment requests to: Mikael_Andersson@mentor.com
# *************************************************************************************

###################################################################
# Please don't change this file.  Use overrides instead!!!
###################################################################


# These variables will be updated by the create simdir script
BLOCKNAME=___REPLACE_THIS_BLOCKNAME
BLOCK_OVERRIDES=___REPLACE_THIS_BLOCK_OVERRIDES
SRCHOME=___REPLACE_THIS_SRCHOME
QME_VERSION = ___REPLACE_THIS_QME_VERSION
include ${QME_HOME}/templates/Makefile.help

################################################################
# Base settings
################################################################
include ${QME_HOME}/templates/Makefile.base

################################################################
# Site Overrides
# Using this is optional. But allowes for common site settings
################################################################
-include ${QME_SITE_SETTINGS}/Makefile.site.defaults
################################################################
# Project Overrides, optional
################################################################
-include ${QME_PROJECT_HOME}/qme_setup/Makefile.project.defaults

################################################################
# Block Overrides (Required)
################################################################
include ${BLOCK_OVERRIDES}
##############################################################
# Include all relations that are calculated
##############################################################
include ${QME_HOME}/templates/Makefile.relations


################################################################
# Targets
################################################################



################################################################
# Compile everything 
################################################################

compile:: clean copy_modelsimini ${COMPILE_UVM_TARGET} ${COMPILE_UVMC_TARGET} ${COMPILE_SC_TARGET} compile_rtl compile_tb liblist

copy_modelsimini::
	@cp -f ${ORIGIN_MODELSIM_INI} .
	@chmod u+w modelsim.ini
################################################################
# Clean out sim dir
################################################################

clean::
	@rm -rf ${QUESTALIBS_DIR}
	@rm -rf ${TESTCASE_DIR}
	@rm -f *.wlf
	@rm -f transcript
	@rm -f *.dbg
	@rm -f modelsim.ini
	@rm -f ${LIBLIST}
	@rm -f *.csv
	@rm -rf ra_work
	@rm -rf html
	@rm -f modelsim.ini
	@rm -rf ${CDC_RESULTS} ${AUTOCHECK_RESULTS} ${FORMAL_RESULTS} ${COVERCHECK_RESULTS}



################################################################
# Recompile UVM to catch timescale problem
################################################################
compile_uvm::
	@echo "Recompiling uvm library UVM_VERSION ${UVM_VERSION} with timescale VLOG_TIMESCALE=${VLOG_TIMESCALE}";
	@test -d ${QUESTALIBS_DIR}||mkdir ${QUESTALIBS_DIR}
	@test -d ${QUESTACLIBS_DIR}||mkdir ${QUESTACLIBS_DIR}
	@test -d ${QUESTALIBS_DIR}/${UVM_VERSION}||vlib ${QUESTALIBS_DIR}/${UVM_VERSION}
	@vmap mtiUvm ${PWD}/${QUESTALIBS_DIR}/${UVM_VERSION}
	${VLOG} -work mtiUvm ${UVM_HOME}/src/uvm_pkg.sv \
	${QUESTA_HOME}/verilog_src/${QUESTA_UVM_DEBUG}/src/questa_uvm_pkg.sv \
	${UVM_INC_DIR} ${VLOG_TIMESCALE} +incdir+${QUESTA_HOME}/verilog_src/${QUESTA_UVM_DEBUG}/src/ \
	-suppress 2186 -suppress 8688 +define+QUESTA_LOOKUP_SEQ
	gcc -m$(ARCH) -fPIC -DQUESTA -g -W -shared -x c -I$(QUESTA_HOME)/include ${UVM_HOME}/src/dpi/uvm_dpi.cc -o ${QUESTACLIBS_DIR}/uvm_dpi.so

################################################################
# Compile Questa VIP library. You need to override QVIP_TARGETS
################################################################

compile_qvips::${QVIP_COMMON} ${QVIP_TARGETS}

################################################################
# Compile RTL code
################################################################

compile_rtl::remove_remake precompile_rtl check_filelist_rtl compile_rtl_script postcompile_rtl

compile_rtl_script::
	@test -d ${QUESTALIBS_DIR}||mkdir ${QUESTALIBS_DIR}
	@test -d ${QUESTACLIBS_DIR}||mkdir ${QUESTACLIBS_DIR}
	${DISABLE_VERDI_PLI};${COMPILE_SCRIPT} -file ${DUT_FILELIST} ${DUT_COMPILE_SCRIPT_ARGUMENTS} ${X_VLOG_ARGS} ${X_VCOM_ARGS} ${NOCOLOR} ${DEFINE_SETUP}
	mv  ${QUESTALIBS_DIR}/liborder.txt ${QUESTALIBS_DIR}/rtl_liborder.txt

# This is used for formal verification applications
compile_rtl_fv::precompile_rtl check_filelist_rtl compile_rtl_fv_script postcompile_rtl

compile_rtl_fv_script::
	@test -d ${QUESTALIBS_DIR}||mkdir ${QUESTALIBS_DIR}
	@test -d ${QUESTACLIBS_DIR}||mkdir ${QUESTACLIBS_DIR}
	${DISABLE_VERDI_PLI};${COMPILE_SCRIPT} -file ${DUT_FILELIST} ${DUT_COMPILE_SCRIPT_ARGUMENTS} ${X_VLOG_ARGS} ${X_VCOM_ARGS} \
	${SKIP_SYNTHOFF_REGION} ${NOCOLOR}
	mv  ${QUESTALIBS_DIR}/liborder.txt ${QUESTALIBS_DIR}/rtl_liborder.txt

################################################################
# Compile TB code
################################################################

compile_tb::remove_opts remove_remake precompile_tb compile_qvips check_filelist_tb compile_tb_script postcompile_tb

compile_tb_script::
	${DISABLE_VERDI_PLI};${COMPILE_SCRIPT} -file ${TB_FILELIST} ${TB_COMPILE_SCRIPT_ARGUMENTS} -vlogargs=${UVM_INC_DIR} ${SETUPARGS} ${X_VLOG_ARGS} ${X_VCOM_ARGS} ${NOCOLOR} 
	@cp  ${QUESTALIBS_DIR}/liborder.txt ${QUESTALIBS_DIR}/tb_liborder.txt
	@cp ${QUESTALIBS_DIR}/rtl_liborder.txt ${QUESTALIBS_DIR}/liborder.txt
	@cat ${QUESTALIBS_DIR}/tb_liborder.txt >> ${QUESTALIBS_DIR}/liborder.txt

################################################################
# Messages outputs
################################################################
no_uvmc::
	@echo "NOTE! UVMC not enabled. Use UVMC=1 to enable..."

no_uvm::
	@echo "NOTE! Using built in UVM package. Use RECOMPILE_UVM=1 to recompile UVM with timescale ${VLOG_TIMESCALE}"

no_comp_sc::
	@echo "NOTE! Not compiling System C TLM models. Use UVMC=1 to enable..."

################################################################
# Compile UVM Connect Package (UVMC=1)
################################################################

compile_uvmc::
	@echo "NOTE! Compiling UVMC Library"
	@test -d ${QUESTALIBS_DIR}||mkdir ${QUESTALIBS_DIR}
	test -d ${QUESTALIBS_DIR}/uvmc_lib||vlib ${QUESTALIBS_DIR}/uvmc_lib
	make -f ${UVMC_HOME}/lib/Makefile.questa UVM_HOME=${UVM_HOME} UVMC_HOME=${UVMC_HOME} \
	UVMC_LIB=${QUESTALIBS_DIR}/uvmc_lib BITS=${ARCH} UVM_LIB=mtiUvm CPPVER=${QUESTA_GCC_VERSION} \
	UVM_VERSION=${UVM_VERSION} UVMC_X_ARGS=${UVMC_X_ARGS} UVMC_SC_X_ARGS=${UVMC_SC_X_ARGS} uvmc_pkg
	vmap uvmc_lib ${PWD}/${QUESTALIBS_DIR}/uvmc_lib

################################################################
# Compile SystemC target if UVM Connect is enabled
################################################################

compile_sc:: 
	test -d ${QUESTALIBS_DIR}||mkdir ${QUESTALIBS_DIR}
	test -d ${QUESTALIBS_DIR}/${TB_LIB_NAME}||vlib ${QUESTALIBS_DIR}/${TB_LIB_NAME};\
	vmap ${TB_LIB_NAME} ${PWD}/${QUESTALIBS_DIR}/${TB_LIB_NAME}
	${SCCOM} ${UVMC_HOME}/../sc_load_uvmc_dpi.cpp -work ${TB_LIB_NAME}
	@if test -e  ${SC_MAKEFILE}; \
	then make -f ${SC_MAKEFILE} $(SC_MAKE_TARGET) WORK=${TB_LIB_NAME} \
	UVMC_HOME=${UVMC_HOME} MTECH=${QUESTA_HOME} C_ARGS=${SC_ARGS}; else \
	echo "Did not find a makefile ($SC_MAKEFILE) for compiling your systemc tlm wrapper - skipping...";fi
	${SCCOM_LINK}


#########################################################
# Optimize tb ,used in chip level and regressions
#########################################################
opt:opt_fast opt_dbg

opt_fast:
	${DISABLE_VERDI_PLI};${VOPT} -work $(TB_LIB_NAME) ${VOPT_TOP_LEVELS} -l vopt_fast.log \
	-o $(TB_TOP_NAME)_opt -$(ARCH) $(VOPTSWITCHES) ${CC_OPT_ARGS} ${X_OPT_ARGS} -f ${LIBLIST} -time

opt_dbg:
	${DISABLE_VERDI_PLI};${VOPT} -work $(TB_LIB_NAME) ${VOPT_TOP_LEVELS} -l vopt_dbg.log \
	-o $(TB_TOP_NAME)_dbg -$(ARCH) $(VOPTSWITCHES_BLOCK) ${CC_OPT_ARGS} ${X_OPT_ARGS} -f ${LIBLIST} -time ${DEBUG}

remove_opts:
	@echo "Starting to execute target $@";
	@if [ -e ${QUESTALIBS_DIR}/$(TB_LIB_NAME)/$(TB_TOP_NAME)_opt ];then vdel -lib $(TB_LIB_NAME) $(TB_TOP_NAME)_opt ;fi
	@if [ -e ${QUESTALIBS_DIR}/$(TB_LIB_NAME)/$(TB_TOP_NAME)_opt_dbg ];then vdel -lib $(TB_LIB_NAME) $(TB_TOP_NAME)_opt_dbg ;fi
	@rm -f ${OPT_TOUCHFILE}




#########################################################
# prepare recompile
#########################################################
create_recompile_in_background::
	@test -e ${QUESTALIBS_DIR}/makefile.remake||echo "Running generation of remake file in background"
	@test -e ${QUESTALIBS_DIR}/makefile.remake||create_questa_remake.pl ${QUESTALIBS_DIR}  ${QUESTALIBS_DIR}/liborder.txt  ${QUESTALIBS_DIR}/makefile.remake&

remove_remake::
	@rm -f ${QUESTALIBS_DIR}/makefile.remake

create_recompile::${QUESTALIBS_DIR}/makefile.remake

${QUESTALIBS_DIR}/makefile.remake::
	create_questa_remake.pl ${QUESTALIBS_DIR}  ${QUESTALIBS_DIR}/liborder.txt  ${QUESTALIBS_DIR}/makefile.remake

recompile:: 
	@echo "Updating ${QUESTALIBS_DIR}/makefile.remake if it does not exist"
	@test -e ${QUESTALIBS_DIR}/makefile.remake||create_questa_remake.pl ${QUESTALIBS_DIR}  ${QUESTALIBS_DIR}/liborder.txt  ${QUESTALIBS_DIR}/makefile.remake&
	@echo "Starting recompile..."
	@${DISABLE_VERDI_PLI};make all -f  ${QUESTALIBS_DIR}/makefile.remake


load_dut_cmd:: 
	${DISABLE_VERDI_PLI}; \
	${VSIM} -$(ARCH) \
	${VSIM_TIMERES} \
	-f ${LIBLIST} \
	-lib $(DESIGN_LIB) \
	${TIMINGCHECKS} \
	-printsimstats \
	${BLOCKNAME} -voptargs=+acc



load_dut::compile_rtl liblist load_dut_cmd





############  Simulation targets ########################
# Flow is different for chip level or block level
#########################################################

ifeq (${VERIFICATION_LEVEL},BLOCK)
GUI_TARGET=gui_block 
BATCH_TARGET=batch_block 
else
GUI_TARGET=gui_chip 
BATCH_TARGET=batch_chip 
endif

batch::${BATCH_TARGET}
gui::${GUI_TARGET}

#########################################################
# Clean and prepare the run directory before starting the 
# new simulation
#########################################################

clean_rundir:
	@echo "Preparing ${RUNDIR} for simulation"
	@test -d ${RUNDIR}||mkdir -p ${RUNDIR}
	@cd ${RUNDIR};rm -f *.ucdb transcript *.wlf wlft* ${QUESTALIBS_DIR} modelsim.ini ${LIBLIST}
	@if test -e ${QUESTALIBS_DIR} ;then cd ${RUNDIR};ln -s ../${QUESTALIBS_DIR};fi
	@if test -e ${MODELSIM_INI} ;then cd ${RUNDIR};ln -s ../modelsim.ini;fi
	@if test -e ${LIBLIST} ;then cd ${RUNDIR};ln -s ../${LIBLIST};fi
	@cd ${RUNDIR};ln -sf ../Makefile
#########################################################
# Start a block level simulation, using built in vopt
#########################################################
ifeq (${METHODOLOGY},OVM)
UVM_ARGUMENTS=+OVM_TESTNAME=${TEST} +OVM_VERBOSITY=${OVM_VERBOSITY} ${NO_ILLEGAL_NAME_OVM} 
else
UVM_ARGUMENTS=+UVM_TESTNAME=${TEST} +UVM_VERBOSITY=${UVM_VERBOSITY} ${NO_ILLEGAL_NAME_UVM} ${UVMCONTROL} 
endif

ifeq (${CDC_PROTOCOL},1)
CDC_PROTOCOL_VSIM_ARGS=${CDC_VSIM_ARGS}
endif

gui_block:: create_recompile_in_background liblist clean_rundir presim_script gui_block_cmd postsim_script
gui_block_cmd::
	@echo "Launching GUI in directory called ${RUNDIR} with DEBUG_LEVEL=${DEBUG_LEVEL}"
	cd ${RUNDIR};${DISABLE_VERDI_PLI};export UCDBFILE=${UCDBFILE}; \
	${VSIM}  ${VSIM_TOP_LEVELS} -$(ARCH) \
	${VSIM_TIMERES} \
	-f ${LIBLIST} \
	-lib $(TB_LIB_NAME) \
	${TIMINGCHECKS} \
	-printsimstats \
	-sv_seed ${SEED} \
	-msgmode both -onfinish stop  \
	${VSIM_GCC_VERSION} \
	${DPI_GCC_VERSION} \
	${QUESTA_VIP_SIM_ARGS} \
	${CLASSDEBUG} \
	${VSIMARGS} \
	${VSIMVOPTARGS} \
	${GUI_DO} \
	-gui \
	${EXTRA_VSIM_ARGS}  \
	${ASSERTION_DBG} \
	${SOLVEFAIL_ARGS}  \
	${POSTSIMDEBUG} \
	${DEBUG} \
	${FSMDEBUG} \
	${TITLE} \
	${UVM_ARGUMENTS} \
	${UVM_SIM_ARGS} \
	${CDC_PROTOCOL_VSIM_ARGS}
#########################################################
# Start a chip level simulation, using vopt separately
#########################################################

gui_chip:: create_recompile_in_background liblist clean_rundir opt_dbg presim_script gui_chip_cmd postsim_script

gui_chip_cmd::
	@echo "Launching GUI in directory called ${RUNDIR} with DEBUG_LEVEL=${DEBUG_LEVEL}"
	cd ${RUNDIR};${DISABLE_VERDI_PLI};export UCDBFILE=${UCDBFILE}; \
	${VSIM}  $(TB_LIB_NAME).$(TB_TOP_NAME)_dbg -$(ARCH) \
	${VSIM_TIMERES} \
	-f ${LIBLIST} \
	-lib $(TB_LIB_NAME) \
	${TIMINGCHECKS} \
	-printsimstats \
	-sv_seed ${SEED} \
	-msgmode both -onfinish stop  \
	${VSIM_GCC_VERSION} \
	${DPI_GCC_VERSION} \
	${QUESTA_VIP_SIM_ARGS} \
	${CLASSDEBUG} \
	${VSIMARGS} \
	${GUI_DO} \
	-gui \
	${EXTRA_VSIM_ARGS}  \
	${ASSERTION_DBG} \
	${SOLVEFAIL_ARGS}  \
	${POSTSIMDEBUG} \
	${DEBUG} \
	${FSMDEBUG} \
	${TITLE} \
	${UVM_ARGUMENTS} \
	${UVM_SIM_ARGS} 
#########################################################
# Start a block level simulation, using built in vopt
#########################################################

batch_block:: create_recompile_in_background liblist clean_rundir presim_script batch_block_cmd postsim_script

batch_block_cmd::
	@echo "Launching batch in directory called ${RUNDIR}"
	cd ${RUNDIR};${DISABLE_VERDI_PLI};export UCDBFILE=${UCDBFILE}; \
	${VSIM} ${VSIM_TOP_LEVELS} -$(ARCH) \
	${VSIM_TIMERES} \
	-f ${LIBLIST} \
	-lib $(TB_LIB_NAME) \
	${TIMINGCHECKS} \
	-printsimstats \
	-sv_seed ${SEED} \
	-msgmode both -onfinish stop  \
	${VSIM_GCC_VERSION} \
	${DPI_GCC_VERSION} \
	${QUESTA_VIP_SIM_ARGS} \
	${UVM_ARGUMENTS} \
	${CLASSDEBUG} \
	${VSIMARGS} \
	${VSIMVOPTARGS} \
	${REGRESSION_DO} \
	-c \
	${EXTRA_VSIM_ARGS}  \
	${ASSERTION_DBG} \
	${SOLVEFAIL_ARGS}  \
	${POSTSIMDEBUG} \
	${DEBUG} \
	${FSMDEBUG} \
	+UVM_VERBOSITY=${UVM_VERBOSITY} \
	${UVM_SIM_ARGS} 

#########################################################
# Start a chip level simulation, using vopt separately
#########################################################

batch_chip:: create_recompile_in_background liblist clean_rundir opt_dbg presim_script batch_chip_cmd postsim_script

batch_chip_cmd::
	@echo "Launching batch in directory called ${RUNDIR}"
	cd ${RUNDIR};${DISABLE_VERDI_PLI};export UCDBFILE=${UCDBFILE}; \
	${VSIM}  $(TB_LIB_NAME).$(TB_TOP_NAME)_dbg -$(ARCH) \
	${VSIM_TIMERES} \
	-f ${LIBLIST} \
	-lib $(TB_LIB_NAME) \
	${TIMINGCHECKS} \
	-printsimstats \
	-sv_seed ${SEED} \
	-msgmode both -onfinish stop  \
	${VSIM_GCC_VERSION} \
	${DPI_GCC_VERSION} \
	${QUESTA_VIP_SIM_ARGS} \
	${UVM_ARGUMENTS} \
	${CLASSDEBUG} \
	${VSIMARGS} \
	${REGRESSION_DO} \
	-c \
	${EXTRA_VSIM_ARGS}  \
	${ASSERTION_DBG} \
	${SOLVEFAIL_ARGS}  \
	${POSTSIMDEBUG} \
	${DEBUG} \
	${FSMDEBUG} \
	${UVM_SIM_ARGS} 

############# Regression Targets ########################
# Used as first target when running regression
#########################################################
# Start a simulation in regression, vopt is done before
#########################################################

batch_regression:: liblist presim_script batch_regression_cmd postsim_script


batch_regression_cmd::
	${DISABLE_VERDI_PLI};export UCDBFILE=${UCDBFILE}; \
	${VSIM}  $(TB_LIB_NAME).$(TB_TOP_NAME)_opt -$(ARCH) \
	${VSIM_TIMERES} \
	-f ${LIBLIST} \
	-lib $(TB_LIB_NAME) \
	${TIMINGCHECKS} \
	-quiet \
	-printsimstats \
	-sv_seed ${SEED} \
	-msgmode both -onfinish stop  \
	${VSIM_GCC_VERSION} \
	${DPI_GCC_VERSION} \
	${QUESTA_VIP_SIM_ARGS} \
	${UVM_ARGUMENTS} \
	${VSIMARGS} \
	${REGRESSION_DO} \
	-c \
	${EXTRA_VSIM_ARGS}  \
	${CC_COLLECT} \
	-assertdebug \
	-wlf ${TEST}.wlf \
	${UVM_SIM_ARGS} 
 #########################################################
# When rerunning a simulation due to failure
#########################################################
# Start a simulation in regression with debug, vopt is done before
#########################################################

batch_regression_dbg:: liblist presim_script batch_regression_dbg_cmd postsim_script

batch_regression_dbg_cmd::
	${DISABLE_VERDI_PLI};export UCDBFILE=${UCDBFILE}; \
	${VSIM}  $(TB_LIB_NAME).$(TB_TOP_NAME)_dbg -$(ARCH) \
	${VSIM_TIMERES} \
	-f ${LIBLIST} \
	-lib $(TB_LIB_NAME) \
	${TIMINGCHECKS} \
	-printsimstats \
	-sv_seed ${SEED} \
	-msgmode both -onfinish stop  \
	${VSIM_GCC_VERSION} \
	${DPI_GCC_VERSION} \
	${QUESTA_VIP_SIM_ARGS} \
	${UVMCONTROL} \
	${CLASSDEBUG} \
	${VSIMARGS} \
	${REGRESSION_DBG_DO} \
	-c \
	${EXTRA_VSIM_ARGS}  \
	${ASSERTION_DBG} \
	${SOLVEFAIL_ARGS}  \
	${POSTSIMDEBUG} \
	${DEBUG} \
	+UVM_TESTNAME=${TEST} \
	${FSMDEBUG} \
	-wlf ${TEST}.wlf 

#########################################################
# Preparing a project file containing all the switches
# Note. Makes it easier to pick upp a regression
#########################################################
create_project_file::
	@echo "Starting to execute target $@";
	@rm -f default.vrm
	@test -e default.vrm||echo "VRMSTART">default.vrm;\
	        echo "VRM::Version 1">>default.vrm; \
	        echo "VRM::AddRmdb ${RMDBFILE}" >> default.vrm; \
	        echo "VRMEND" >> default.vrm;
	@sed s/VRMEND//g default.vrm > default.vrm.tmp
	@echo "VRM::AddConfiguration ${RMDBFILE} {${BLOCKNAME}_regression} {{I my_run}} {-j ${MAX_PARALLEL_JOBS} -clean -GBLOCKNAME=${BLOCKNAME} \
	${TIMEOUTARGS} ${NOREUSESEEDS} \
	-GBITS=${ARCH} \
	-GTCSPEC=${TC_SPEC} \
	-GMERGE_HOME=${MERGED_UCDB_HOME} \
	-GREPORTS_HOME=${HTML_REPORTS_HOME} \
	-GHTML_REPORTDIR=${HTML_REPORTS_HOME} \
	-GGRID=${GRID_ENGINE} \
	-GGRIDQUEUE=${GRID_QUEUE} \
	-GRANKING=${RANKING} \
	-GCOVERCHECK=${COVERCHECK} \
	-GAUTOCHECK=${AUTOCHECK} \
	-GFORMAL=${FORMAL} \
	-GCDC_STATIC=${CDC_STATIC} \
	-GTIMESTAMP=${TIMESTAMP} \
	-GREQUIRE_VPLAN=${REQUIRE_VPLAN} \
	-GSEND_EMAIL=${SEND_EMAIL} \
	-GXML2UCDB_DATAFIELDS=\"${XML2UCDB_DATAFIELDS}\" \
	-GEMAIL_RECIPIENT=${EMAIL_RECIPIENT} \
	-GRERUN_FAILING_TESTS=${RERUN_FAILING_TESTS} \
	-GVERIFICATION_LEVEL=${VERIFICATION_LEVEL} \
	-GSANITY=${SANITY} \
	-GUSER_REPORT_TARGET=${USER_REPORT_TARGET} \
	-vrmdata ${SCRATCHDIR}}" >> default.vrm.tmp 
	@echo "VRMEND" >> default.vrm.tmp;
	@mv default.vrm.tmp  default.vrm


#########################################################
# Checking directories and if there exists a tc_spec 
#########################################################

check_prereq::
	@test -d transformrule.txt||touch transformrule.txt
	@test -d ${MERGED_UCDB_HOME}||mkdir -p ${MERGED_UCDB_HOME}	
	@test -d ${HTML_REPORTS_HOME}||mkdir -p ${HTML_REPORTS_HOME}	
	@if [ -f $(TC_SPEC) ]; then \
	  echo "INFO: Found ${TC_SPEC} - (OK)"; \
	else \
	  echo ""; \
	  echo "REGRESSION_SETUP_ERROR: Did not find ${TC_SPEC} aborting..."; \
	  exit 1; \
	fi;

#########################################################
# Launch GUI for controlling regressions
#########################################################

regression:: check_prereq preregression create_project_file
	vrun -project default.vrm -rmdb ${RMDBFILE} ${REGRESSION_ARGS} ${RUNNABLE} -config  ${BLOCKNAME}_regression&

#########################################################
# Check status of regression directory
#########################################################
regression_status::
	vrun -status -rmdb ${RMDBFILE} -vrmdata ${SCRATCHDIR}

#########################################################
# Attempt to kill an ongoing regression
#########################################################

regression_kill:
	@echo "Attempting to kill all processes started on this machine"
	vrun -kill -rmdb ${RMDBFILE} -vrmdata ${SCRATCHDIR}



view_trend:
	firefox ${HTML_REPORTS_HOME}/${SETUP}_trend_report/index.html &

view_coverage:
	firefox ${HTML_REPORTS_HOME}/${SETUP}_coverage_report/index.html &

view_backannotated_vplan:	
	firefox ${HTML_REPORTS_HOME}/${SETUP}_coverage_report/testplan.html &

view_email:
	firefox ${SCRATCHDIR}/my_run/send_email/email_message.htm &




############# Formal tools ##############################
#########################################################
# Extract generics for a design. TB can override generics
# This is necessary for covercheck
#########################################################

get_generics:: compile get_generics_only

get_generics_only:
	${DISABLE_VERDI_PLI};${VSIM} -c $(TB_LIB_NAME).$(TB_TOP_NAME) \
	-quiet -$(ARCH)  ${VSIMSWITCHES} ${UVMCONTROL_REGR} ${VSIMARGS} \
	${X_SIM_ARGS} \
        -do "do ${QME_HOME}/dofiles/get_generics.do ${BLOCKNAME}" \
	-voptargs="+acc" ${QUESTA_VIP_SIM_ARGS} ${VSIM_GCC_VERSION} -f ${LIBLIST} 
	@echo "We have now a file called generics.txt that contains all top level generics"

#########################################################
# Run Questa Autocheck
# Intended to be run interactively.
# Should not be run as regression. Missing UCDB storage
#########################################################

autocheck::clean compile_rtl_fv liblist autocheck_only

#autocheck_only::
#	${DISABLE_VERDI_PLI}; \
#	qverify -c -licq -od ${AUTOCHECK_RESULTS} -do "configure license queue on; \
#	${AUTOCHECK_DO_COMMAND}; \
#	autocheck compile -d ${AUTOCHECK_DUT}  \
#	-work ${AUTOCHECK_DESIGN_LIB} \
#	-f ${LIBLIST} ${AUTOCHECK_GENERICS} ${AUTOCHECK_EXTRA_COMP_ARGS}; \
#	autocheck verify -effort ${AUTOCHECK_EFFORT} -timeout ${AUTOCHECK_TIMEOUT} ${AUTOCHECK_EXTRA_VERIFY_ARGS};\
#	exit"
#

autocheck_only::
	${DISABLE_VERDI_PLI}; \
	qautocheck -c -licq -od ${AUTOCHECK_RESULTS} -do "configure license queue on; \
	${AUTOCHECK_DO_COMMAND}; \
	autocheck run -d ${AUTOCHECK_DUT} \
	-work ${AUTOCHECK_DESIGN_LIB} \
	-effort ${AUTOCHECK_EFFORT} -f ${LIBLIST}  ${AUTOCHECK_GENERICS} ${AUTOCHECK_EXTRA_ARGS}; exit"


#########################################################
# Run Questa Covercheck
# Can be run as part of regression or interactively
#########################################################
covercheck: compile covercheck_only

covercheck_only:
	${DISABLE_VERDI_PLI};qautocheck -c -licq -od ${COVERCHECK_RESULTS} -do "\
	configure license queue on;\
	${DISABLE_COVERCHECKS};\
	${COVERCHECK_DO_COMMANDS}; \
	covercheck load ucdb ${COVERCHECK_UCDB}; \
	covercheck compile -d ${COVERCHECK_DUT} -work ${COVERCHECK_DESIGN_LIB} -f ${LIBLIST} ${COVERCHECK_GENERICS} ${COVERCHECK_EXTRA_COMPILE_ARGS}; \
	covercheck verify -effort ${COVERCHECK_EFFORT}  ${COVERCHECK_WITNESS_WAVEFORM} ${COVERCHECK_EXTRA_VERIFY_ARGS} -byinstance; \
	covercheck generate exclude ${COVERCHECK_RESULTS}/covercheck_verify.db \
	covercheck_exclude.do ; \
	exit"


#########################################################
# Run Questa Formal
# Can be run as part of regression or interactively
#
#########################################################

formal::clean compile_rtl_fv liblist formal_only




formal_only::
	@echo "Starting to execute target $@";
	${DISABLE_VERDI_PLI};qformal -c -licq -od ${FORMAL_RESULTS} -do "configure license queue on;\
	${DO_FORMAL_DIRECTIVES}; \
	formal compile -d ${FORMAL_DUT} -f ${LIBLIST} ${DO_FORMAL_GENERICS} -work ${FORMAL_DESIGN_LIB} ${FORMAL_BIND_MODULE}; \
	formal verify ${DO_FORMAL_INIT} -effort ${FORMAL_EFFORT}; \
	formal generate ucdb ${FORMAL_UCDB}; \
	exit"


#########################################################
# Run Questa Formal
# Can be run as part of regression or interactively
#
#########################################################

cdc_static::clean compile_rtl_fv liblist cdc_static_only

cdc_static_only::
	@test -e ${CDC_DIRECTIVES}|| echo "ERROR: You need to provide ${CDC_DIRECTIVES}"
	@test -e ${CDC_DIRECTIVES}|| exit 1
	qverify -od ${CDC_RESULTS} -c -do " \
	do ${CDC_DIRECTIVES}; \
	cdc run -d $(CDC_DUT) -work ${CDC_DESIGN_LIB} -f ${LIBLIST} -compile_assertions  ${CDC_FORMAL}; \
	cdc generate report cdc_detail.rpt; \
	exit"

cdc_generate_testplan::
	qverify -od ${CDC_RESULTS} -c -do " \
	cdc load db ${CDC_RESULTS}/cdc.db;\
	cdc generate testplan cdc_testplan.xml -ucdb cdc.ucdb;\
	exit"


cdc_compile_assertions:
	@if test -e  ${CDC_VLOG_ARGS}; \
	then  vlog -work  ${TB_LIB_NAME} -f ${CDC_VLOG_ARGS} -cuname CDCSVABIND +define+ZI_CW_SVA+ZI_CW_SVCG -sv ; fi
	@if test -e  ${CDC_VCOM_ARGS}; \
	then vcom -work  ${TB_LIB_NAME} -f ${CDC_VCOM_ARGS} ; fi



