<?xml version="1.1"?>
<!-- **********************************************************************************
     # questa_regression.rmdb
     # Questa Makefile Environment
     #
     # Copyright 2014 Mentor Graphics Corporation
     # All Rights Reserved
     #
     # THIS WORK CONTAINS TRADE SECRET AND PROPRIETARY INFORMATION WHICH IS THE PROPERTY OF
     # MENTOR GRAPHICS CORPORATION OR ITS LICENSORS AND IS SUBJECT TO LICENSE TERMS
     #
     # bugs, enhancment requests to: Mikael_Andersson@mentor.com
     # ******************************************************************************tc****-->
<rmdb loadtcl="mytcl" xmlns:xi="http://www.w3.org/2003/XInclude">
  <!-- Method definitions -->
  <!-- ========================================================== -->
  <!-- Bad to use grid engine for everything, by default all methods will use a grid engine, please override 
       methods in runnable where you don't want it. -->


  <!-- ========================================================== -->
  <!-- BASE RUNNABLES- PLEASE OVERRIDE -->
  <!-- ========================================================== -->
  <runnable name="projectsetup" type="base">
    <parameters>
      <parameter name="BLOCKNAME">replace_with_blockname</parameter>
      <parameter name="MAKEFILE"> (%VRUNDIR%)/Makefile</parameter>

      <parameter name="MERGE_HOME">(%SCRATCH%)/../merged_ucdbfiles</parameter>
      <parameter name="REPORTS_HOME">(%SCRATCH%)/../merged_ucdbfiles</parameter>
      <parameter name="HTML_REPORTDIR">(%DATADIR%)/../html_reports</parameter>
      <!-- BEHAVIOUR CONTROL -->
      <!-- GRID can be LOCAL,LSF or SGE -->
      <parameter name="GRID">LOCAL</parameter>
      <parameter name="GRIDQUEUE">asic_batch</parameter>
      <parameter name="VERIFICATION_LEVEL">BLOCK</parameter>
      <parameter name="DEBUG_LEVEL">LOW</parameter>
      <parameter name="SEND_EMAIL">1</parameter>

      <parameter name="VCOVER_OPTIONS">-32</parameter>

      <parameter name="VSIM_DO">(%VRUNDIR%)/vsim.do</parameter>
      <parameter name="CLIBLIST">(%CLIBLIST%)</parameter>
      <parameter name="LIBLIST">(%LIBLIST%)</parameter>
      <parameter name="DEBUG">0</parameter>      
      <parameter name="RANKING">0</parameter>
      <parameter name="COVERCHECK">0</parameter>
      <parameter name="AUTOCHECK">0</parameter>
      <parameter name="CDC_STATIC">0</parameter>
      <parameter name="CDC_PROTOCOL">0</parameter>
      <parameter name="CDC_FX">0</parameter>
      <parameter name="FORMAL">0</parameter>
      <parameter name="XPROP">0</parameter>
      <parameter name="REQUIRE_VPLAN">0</parameter>
      <parameter name="RERUN_FAILING_TESTS">0</parameter>
      <parameter name="TIMESTAMP">0</parameter>
      <parameter name="EXCEL_VPLAN">""</parameter>
      <parameter name="DUT_SETUPS" type = "tcl">[get_all_setups (%TCSPEC%)]</parameter>
      <parameter name="XML2UCDB_DATAFIELDS">-datafields "Section, Title, Description, Link, Type, Weight, Goal, Drop"</parameter>
      <parameter name="BITS">64</parameter>
      <parameter name="SANITY">0</parameter>
      <parameter name="USER_REPORT_TARGET"></parameter>

    </parameters>

    <!-- NOTE! Not tested -->
    <method name="compute_grid" gridtype="lsf" mintimeout="600000" maxrunning="(%MAX_PARALLEL_JOBS%)" if="{(%GRID%)} eq {LSF}">
      <command>bsub -q (%GRIDQUEUE%) -J (%RUNNABLE%) -oo (%TASKDIR%)/(%SCRIPT%).bat.o%J -eo (%TASKDIR%)/(%SCRIPT%).bat.e%J \
	(%LSFARGS%) (%WRAPPER%)    </command>
    </method>   
    
    <!-- NOTE! Not tested -->
    <method name="compute_grid" gridtype="sge" action="execScript" mintimeout="600000" maxrunning="(%MAX_PARALLEL_JOBS%)" if="{(%GRID%)} eq {SGE}">
      <command>qsub (%SGEARGS%) -N (%INSTANCE%) (%WRAPPER%)</command> 
    </method>

    <method  name="compute_grid" maxrunning="(%MAX_PARALLEL_JOBS%)" if="{(%GRID%)} eq {LOCAL}">
    </method>   

  </runnable>

  <!-- ========================================================== -->
  <!-- BASE RUNNABLE that should not be necessary to edit -->
  <!-- ========================================================== -->
  <runnable name="testsetup" type="base" base="projectsetup" >
    <parameters>
      <!-- == Parameters to control the running of the regressions == -->
      <parameter name="triageoptions">-severity IFEW -rulesfile (%VRUNDIR%)/transformrule.txt -verbose</parameter>
      <parameter name="tplanoptions">-format Excel -autoweight -verbose -startstoring 1 (%XML2UCDB_DATAFIELDS%)</parameter>
      <parameter name="mergeoptions">-testassociated</parameter>
    </parameters>
  </runnable>

  <!-- ================================================ -->
  <!-- == Top Level Group Runnable  =================== -->
  <!-- ================================================ -->
  <runnable name="my_run" type="group" sequential="yes" base="testsetup">
    <method base="compute_grid"/>
    <members>
      <member>all_setups</member>
      <member>finalize_ranking</member>
      <member>regression_summary</member>
      <member>user_report</member>
      <member>send_email</member>
    </members>
  </runnable>

  <!-- ================================================ -->
  <!-- == Email report at the end   =================== -->
  <!-- ================================================ -->
  <runnable name="send_email" type="task" base="testsetup" if="(%SEND_EMAIL%)">
    <!-- No need to run this on queu -->
    <method>
    </method>
    <parameters>
      <parameter name="EMAIL_SUBJECT">(%BLOCKNAME%) Regression Completed</parameter>
      <parameter name="MESSAGE_FILE">(%TASKDIR%)/email_message.htm</parameter>
      <parameter name="ATTACHMENT_FILE">regression_report.txt</parameter>
      <parameter name="HTML" type="tcl">[generate_report (%BLOCKNAME%) (%HTML_REPORTDIR%) (%DATADIR%)/vrun_status_report/index.html (%REQUIRE_VPLAN%)]</parameter>
      <parameter name="CSS" type="tcl">[get_css]</parameter>
      <parameter name="REMOVE_TXT1">"Warning: Event stream not terminated in an 'end' event"</parameter>
      <parameter name="REMOVE_TXT2">"regression may still be running or may have terminated abnormally"</parameter>
      <parameter name="RERUN_TESTS" type="tcl">[generate_rerun_info (%TIMESTAMP%) (%DATADIR%)]</parameter>
      <parameter name="TRIAGE_CMD" type="tcl">[generate_triage_cmd (%TIMESTAMP%) (%DATADIR%)]</parameter>
    </parameters>

    <execScript launch="/bin/bash" mintimeout="300">
      <command>echo 'DEBUG:(%HTML%) '</command>
      <command>echo "(%BLOCKNAME%)" </command>
      <command>echo "DEBUG:(%HTML_REPORTDIR%) "</command>
      <command>echo "DEBUG:(%DATADIR%) "</command>
      <command>echo "DEBUG:generate_rerun_info  (%TIMESTAMP%) (%DATADIR%)"</command>
      <command>echo "DEBUG:(%RERUN_TESTS%)"</command>

      <command>EMAILMESSAGE=&quot;(%MESSAGE_FILE%)&quot;</command>
      <!--HEADER -->
      <command>echo 'To: (%EMAIL_RECIPIENT%)' &gt; (%MESSAGE_FILE%)</command>
      <!--command>echo 'Cc: (%EMAIL_CCLIST%)' &gt;&gt; (%MESSAGE_FILE%)</command-->
      <command>echo 'Subject: (%EMAIL_SUBJECT%)' &gt;&gt; (%MESSAGE_FILE%)</command>;
 
      <command>echo 'MIME-Version: 1.0' &gt;&gt; (%MESSAGE_FILE%)</command>;
      <command>echo 'Content-Type: text/html; charset='us-ascii'' &gt;&gt; (%MESSAGE_FILE%)</command>;
      <command>echo 'Content-Disposition: inline' &gt;&gt; (%MESSAGE_FILE%)</command>;
      <!--BODY -->
      <command>echo "&lt;HTML&gt;" &gt;&gt; (%MESSAGE_FILE%)</command>
      <command>echo "(%CSS%)" &gt;&gt; (%MESSAGE_FILE%)</command>
      <command>echo "&lt;body&gt;" &gt;&gt; (%MESSAGE_FILE%)</command>
      <command>echo "&lt;pre style="font: monospace"&gt;" &gt;&gt; (%MESSAGE_FILE%)</command>
      <command>echo '(%HTML%)' &gt;&gt; (%MESSAGE_FILE%)</command>
      <command>echo "Regression on (%BLOCKNAME%) Done!" &gt;&gt; (%MESSAGE_FILE%)</command>
      <command>echo "" &gt;&gt; (%MESSAGE_FILE%)</command>
      <command>echo "Time:      `date`" &gt;&gt; (%MESSAGE_FILE%)</command>
      <command>echo "" &gt;&gt; (%MESSAGE_FILE%)</command>
      <command>echo "Machine Name :      `hostname`" &gt;&gt; (%MESSAGE_FILE%)</command>
      <command>echo "" &gt;&gt; (%MESSAGE_FILE%)</command>
      <command>echo "" &gt;&gt; (%MESSAGE_FILE%)</command>
      <command>echo "&lt;H2&gt;DETAILED REGRESSION RESULTS&lt;/H2&gt;" &gt;&gt; (%MESSAGE_FILE%)</command>
      <command>printf "&lt;b&gt;Regression run directory:&lt;/b&gt; (%SCRATCH%)\n" &gt;&gt; (%MESSAGE_FILE%)</command>
      <command>printf "&lt;b&gt;Regression HTML reports:&lt;/b&gt; (%HTML_REPORTDIR%)\n\n" &gt;&gt; (%MESSAGE_FILE%)</command>
 
      <command>printf "&lt;H2&gt;DETAILS ON ALL TASKS:&lt;/H2&gt;" &gt;&gt; (%MESSAGE_FILE%)</command>
      <command>vrun -status -filter status!=Empty -columns datetime/-30,runnable/-21,RMDB:CURRENT_SETUP/-20,RMDB:ITERATION/-40,seed/-20,status/-20,reason/-50 -nosummary -vrmdata (%DATADIR%)|grep -v "^\/\/"|grep -v (%REMOVE_TXT1%)|grep -v (%REMOVE_TXT2%) &gt;&gt; (%MESSAGE_FILE%)</command>
      <command>printf "&lt;H2&gt;Results analysis&lt;/H2&gt;" &gt;&gt; (%MESSAGE_FILE%)</command>
      <command>printf "To do results analysis              \n" &gt;&gt; (%MESSAGE_FILE%)</command>
      <command>printf "Copy command below                  \n" &gt;&gt; (%MESSAGE_FILE%)</command>
      <command> echo '(%TRIAGE_CMD%)' &gt;&gt; (%MESSAGE_FILE%)</command>

       <command>printf "&lt;H2&gt;Make commands to run failing tests:&lt;/H2&gt;" &gt;&gt; (%MESSAGE_FILE%)</command>
      <command> echo '(%RERUN_TESTS%)' &gt;&gt; (%MESSAGE_FILE%)</command>
 
      <command>echo "&lt;/pre&gt;" &gt;&gt; (%MESSAGE_FILE%)</command>
      <command>echo "&lt;/body&gt;" &gt;&gt; (%MESSAGE_FILE%)</command>
      <command>echo "&lt;/HTML&gt;" &gt;&gt; (%MESSAGE_FILE%)</command>
 

      <command>/usr/lib/sendmail  (%EMAIL_RECIPIENT%) &lt; $EMAILMESSAGE</command>

      <command>echo "Regression complete and email report sent to (%EMAIL_RECIPIENT%)"</command>
    </execScript>
  </runnable>

  <!-- ================================================ -->
  <!-- == Handle each setup as it own  ================ -->
  <!-- == All setups run in parallel   ================ -->
  <!-- ================================================ -->
  <runnable name="all_setups" type="group" sequential="no" base="testsetup">

    <parameters>
    </parameters>
    <members>
      <member>setup</member>
    </members>
  </runnable>

  <!-- ================================================ -->
  <!-- == Put all ranked simulations as part of a new tc spec  ================ -->
  <!-- ================================================ -->

  <runnable name="finalize_ranking" type="task" base = "testsetup" if="(%RANKING%) eq {1}">
    <execScript launch="/bin/csh -f">
      <command>cat (%SCRATCH%)/*(%TIMESTAMP%)_ranked_tc_spec.list >> (%SCRATCH%)/(%TIMESTAMP%)_ranked_tc_spec.txt</command>
    </execScript>
  </runnable>    

  <!-- ================================================ -->
  <!-- == Create ranking if necessary                   -->
  <!-- ================================================ -->

  <runnable name="create_rankfile" type="task" if="(%RANKING%) eq {1}" >
    <parameters>
      <parameter name="ACTUAL_SETUP">(%setup.ITERATION%)</parameter>      
      <parameter name="mymergefile" >(%MERGE_HOME%)/(%ACTUAL_SETUP%).(%BLOCKNAME%).(%TIMESTAMP%).merge.ucdb</parameter>
    </parameters>
    <execScript>
      <command>if [catch {open (%SCRATCH%)/(%ACTUAL_SETUP%)_(%TIMESTAMP%)_ranked_tc_spec.list w} ranked_spec_file] { </command>
      <command>  puts stderr "Cannot create file (%SCRATCH%)/(%ACTUAL_SETUP%)_(%TIMESTAMP%)_ranked_tc_spec.list\n"  </command>
      <command>  exit                                                            </command>
      <command>}                                                                 </command>
      <command>set f (%mymergefile%)                                               </command>
      <command> echo "Ranking: $f"                                                </command>
      <command> set test [lindex [split [file rootname [file tail $f]] "."] 0 ]  </command>
      <command> set t [lindex [split $test _] 0]                                 </command>
      <command> vcover ranktest -concise -rankfile (%SCRATCH%)/$t.rank $f        </command>
      <command> array unset test_seed                                            </command>
      <command> if [catch {open (%SCRATCH%)/$t.contrib r} contrib_file] {        </command>
      <command>   puts stderr "Cannot open file (%SCRATCH%)/$t.contrib\n"        </command>
      <command>   exit                                                           </command>
      <command> }                                                                </command>
      <command>  # Read and close the file                                       </command>
      <command>  foreach line [split [read $contrib_file] \n] {                  </command>
      <command>    if {[regexp {.ucdb} $line]} {                                 </command>
      <!--      # Get the seed'nr                                      
                # get it by issuing the command vcover attribute -seed ucdb_file_name
                # it returns the seed with this syntax:                     
                # TESTNAME = fpu_test_sequence_fair_996513213               
                #     SEED                = 996513213                       -->
      <command>      set tmp [split [vcover attribute -seed $line]]              </command>
      <command>      set testname [lindex [ split [lindex $tmp 2 ] : ] 0 ]       </command>
       <command>      set testname [string map {(%ACTUAL_SETUP%)_ ""} $testname] </command>
      <command>      set seed [lindex $tmp [expr [llength $tmp] - 2] ]           </command>
      <command>      lappend test_seed($testname) $seed                          </command>
      <command>    }                                                             </command>
      <command>  }                                                               </command>
      <command>  close $contrib_file                                             </command>
      <command>  set search [array startsearch test_seed]                        </command>
      <command>  while {[array anymore test_seed $search]} {                     </command>
      <command>    set testname [array nextelement test_seed $search]            </command>
      <command>    set nr_of_runs [llength $test_seed($testname)]                </command>
      <command>    puts $ranked_spec_file "(%ACTUAL_SETUP%) $testname  $nr_of_runs $test_seed($testname)"</command>
      <command>  }                                                               </command>
      <command>close $ranked_spec_file                                           </command>
    </execScript>
  </runnable>

  <!-- ================================================ -->
  <!-- == Run CDC static - NOT IMPLEMENTED YET          -->
  <!-- ================================================ -->

  <runnable name="cdc_static" type="task" base="testsetup" if="(%CDC_STATIC%) eq {1}">
    <execScript launch="/bin/csh -f">
      <command> echo "Static CDC in regression not yet implemented" </command>
    </execScript>
  </runnable>

  <!-- ================================================ -->
  <!-- == Run For each setup, compile,simulate and gather data          -->
  <!-- ================================================ -->

  <runnable name="setup" type="group" foreach="(%DUT_SETUPS%)" sequential="yes" base="testsetup">
    <parameters>
      <parameter name="ACTUAL_SETUP">(%setup.ITERATION%)</parameter>      
      <parameter name="mergelist">(%DATADIR%)/(%ACTUAL_SETUP%).mergelist</parameter>
      <parameter name="triagefile">(%ACTUAL_SETUP%).(%BLOCKNAME%).(%TIMESTAMP%).tdb</parameter>
      <parameter name="TRIAGECOMMAND">"vrun -vrmdata regression_data -gui -do triage view (%triagefile%) -question all"</parameter>
    </parameters>
    <members>
      <member>convert_vplan_to_ucdb</member>
      <member>compile_all</member>
      <member>cdc_static</member>
      <member>tests</member>
      <member>data_collection</member>
    </members>
  </runnable>

  <!-- == test: Running all simulations and formal apps in parallell  ============== -->
  <runnable name="tests" type="group" sequential="no" base="testsetup">
    <members>
      <member>test</member>
    </members>
  </runnable>


  <!-- == test: Running all simulations and formal apps in parallell  ============== -->
  <runnable name="test" type="group" sequential="no" base="testsetup" foreach="(%VALID_TESTS%)">
    <parameters>
      <parameter name="ACTUAL_SETUP">(%setup.ITERATION%)</parameter>      
      <parameter name="VALID_TESTS" type="tcl">[get_tests_for_setup (%TCSPEC%) (%ACTUAL_SETUP%)]</parameter>
    </parameters>
    <members>
      <member>all_sims</member>
    </members>
  </runnable>

  <!-- ================================================ -->
  <!-- == Compile group Runnable                     == -->
  <!-- == This group is sequential. A failure in any == -->
  <!-- == member of this group will cause the entire == -->
  <!-- == group and downstream operations to be      == -->
  <!-- == abandoned. Runnables are being used here   == -->
  <!-- == for more control over specification of     == -->
  <!-- == dependencies                               == -->  
  <!-- ================================================ -->
  <runnable name="compile_all" type="task" base = "testsetup" >
    <parameters>
      <!--parameter name="ACTUAL_SETUP" type="tcl">[lindex [split [lindex [split (%CONTEXT%) "/"] end-1] "~"] 1]</parameter-->
      <parameter name="ACTUAL_SETUP">(%setup.ITERATION%)</parameter>      
      <parameter name="EXTRA_VLOG_ARGS" type="tcl">[get_extra_vlog_args (%TCSPEC%) (%ACTUAL_SETUP%)] </parameter>
      <parameter name="EXTRA_VCOM_ARGS" type="tcl">[get_extra_vcom_args (%TCSPEC%) (%ACTUAL_SETUP%)] </parameter>
      <parameter name="EXTRA_OPT_ARGS" type="tcl">[get_extra_args (%TCSPEC%) (%ACTUAL_SETUP%) vopt] </parameter>
      <parameter name="EXTRA_X_COMP_ARGS" type="tcl">[get_extra_args (%TCSPEC%) (%CURRENT_SETUP%) X_COMP_ARGS]</parameter>
      <parameter name="EXTRA_SC_ARGS"    type="tcl">[get_extra_args (%TCSPEC%) (%CURRENT_SETUP%) SC_ARGS]</parameter>
      <parameter name="ALL_COMPILE_ARGS">X_COMP_ARGS=&quot; (%EXTRA_X_COMP_ARGS%) --define FLTVAR_COMPILE_SETUP=(%ACTUAL_SETUP%) (%EXTRA_VLOG_ARGS%) (%EXTRA_VCOM_ARGS%)&quot; SC_ARGS=(%EXTRA_SC_ARGS%)</parameter>
    </parameters>

    <execScript launch="/bin/csh -f">
      <command>unsetenv MODELSIM </command>
      <command>make compile -f (%MAKEFILE%)  VERIFICATION_LEVEL=(%VERIFICATION_LEVEL%) (%ALL_COMPILE_ARGS%) NOCOLOR=--nocolor BITS=(%BITS%)</command> 
      <command>if ($status != 0) exit 1 </command>
      <command>echo "Starting to optimize" </command>
      <command>make opt_fast -f (%MAKEFILE%) VERIFICATION_LEVEL=(%VERIFICATION_LEVEL%) X_OPT_ARGS=(%EXTRA_OPT_ARGS%)  BITS=(%BITS%)</command>
      <command>if ($status != 0) exit 1 </command>
      <command>if ((%RERUN_FAILING_TESTS%) == 1) then</command>
      <command>  make opt_dbg -f (%MAKEFILE%) VERIFICATION_LEVEL=(%VERIFICATION_LEVEL%) X_OPT_ARGS=(%EXTRA_OPT_ARGS%)  BITS=(%BITS%)</command>
      <command>  if ($status != 0) exit 1 </command>
      <command>endif </command>
    </execScript>
  </runnable>

  
  <!-- ================================================ -->
  <!-- == Simulate group Runnable                    == -->
  <!-- == This group is run in parallell. The number == -->  
  <!-- == of parallell jobs are controlled by the    == -->
  <!-- == switch -j <nbr>                            == -->
  <!-- ================================================ -->
  <runnable name="all_sims" type="group" sequential="no" base="testsetup">
    <parameters>
      <parameter name="ACTUAL_SETUP">(%setup.ITERATION%)</parameter>      
      <parameter name="TEST_SEEDS" type="tcl">[get_test_seeds (%TCSPEC%) (%ACTUAL_SETUP%) (%test.ITERATION%) (%SANITY%)]</parameter>
      <parameter name="mergelist">(%DATADIR%)/(%ACTUAL_SETUP%).mergelist</parameter>
    </parameters>
    <members>
      <member>Simulate</member>
      <member>formal</member>
      <member>autocheck</member>
      <member>xprop</member>
    </members>
  </runnable>

  <runnable name="autocheck" type="task" base="testsetup" if="(%AUTOCHECK%) eq {1}">
    <parameters>
      <parameter name="PATH_TO_COMPDIR" type="tcl">[get_rel_path_between (%TASKDIR%) setup compile_all]</parameter>      
    </parameters>
    <execScript launch="/bin/csh -f">
      <command>unsetenv MODELSIM </command>
      <command>ln -s   (%PATH_TO_COMPDIR%)/modelsim.ini</command>
      <command>ln -s   (%PATH_TO_COMPDIR%)/questa_libs</command>
      <command>if ($status != 0) exit 1     </command>      
      <command>make create_liblists get_generics autocheck_only  -f (%MAKEFILE%)  BITS=(%BITS%)</command>
      <command>if ($status != 0) exit 1     </command>      
    </execScript>
  </runnable>

  <runnable name="formal" type="task" base="testsetup" if="(%FORMAL%) eq {1}">
    <parameters>
      <parameter name="PATH_TO_COMPDIR" type="tcl">[get_rel_path_between (%TASKDIR%) setup compile_all]</parameter>      
    </parameters>
    <execScript launch="/bin/csh -f">
      <command> echo "formal in regression not yet implemented" </command>
      <command>ln -s   (%PATH_TO_COMPDIR%)/modelsim.ini</command>
    </execScript>
  </runnable>

  <runnable name="xprop" type="task" base="testsetup" if="(%XPROP%) eq {1}">
    <parameters>
      <parameter name="PATH_TO_COMPDIR" type="tcl">[get_rel_path_between (%TASKDIR%) setup compile_all]</parameter>      
    </parameters>
    <execScript launch="/bin/csh -f">
      <command> echo "xprop in regression not yet implemented" </command>
      <command>ln -s   (%PATH_TO_COMPDIR%)/modelsim.ini</command>
    </execScript>
  </runnable>

      
  <runnable name="Simulate"  type="task"  foreach="(%TEST_SEEDS%)" base="testsetup">
    <parameters>
      <parameter name="PATH_TO_COMPDIR" type="tcl">[get_rel_path_between (%TASKDIR%) setup compile_all]</parameter>      
      <parameter name="TESTNAME" type="tcl">[lindex [split [lindex [split [file tail (%CONTEXT%)] ":"] 0] "~"] 1]</parameter>
      <parameter name="ACTUAL_SETUP">(%setup.ITERATION%)</parameter>
      <parameter name="EXTRA_VSIM_ARGS" type="tcl">[get_extra_args (%TCSPEC%) (%ACTUAL_SETUP%) vsim] </parameter>
      <parameter name="seed" type="tcl">[lindex [split [file tail  (%CONTEXT%)] ":"] 1]</parameter>
      <parameter name="ucdbfile">(%ACTUAL_SETUP%)_(%ITERATION%).ucdb</parameter>
      <parameter name="ucdbtestname">(%ACTUAL_SETUP%)_(%ITERATION%)</parameter>
      <parameter name="UCDBFILE" export="yes">(%ucdbfile%)</parameter>
    </parameters>
    <execScript launch="/bin/csh -f">
      <command>echo mergelist=(%mergelist%) </command>
      <command>unsetenv MODELSIM </command>
      <!--No local rerun -->
      <command> if ("(%RERUN_FAILING_TESTS%)" == "0") then  </command>
      <command>echo "The current DEBUGMODE value is: (%DEBUGMODE:0%)"</command>
      <command>echo "Running the simulation only once since we did not activate rerun failing tests"</command>
      <command>   ln -s   (%PATH_TO_COMPDIR%)/modelsim.ini</command>
      <command>   ln -s   (%PATH_TO_COMPDIR%)/questa_libs</command>
      <command>   make batch_regression  -f (%MAKEFILE%) TEST=(%TESTNAME%) SEED=(%seed%) UCDBFILE=(%ucdbfile%) UCDBTESTNAME=(%ucdbtestname%)  COVER=1  BITS=(%BITS%) SETUP=(%ACTUAL_SETUP%)</command>
      <command>   if ($status != 0) then </command>
      <command>       exit(1)</command>
      <command>   endif </command>
      <command> else </command>
      <!--Local rerun  first attempt-->
      <command> if ("(%DEBUGMODE:0%)" == "0") then  </command>
      <command>   echo "Running the simulation for the first time, DEBUG_MODE=(%DEBUGMODE:0%)"</command>
      <command>   touch ~/one.txt </command>
      <command>   ln -s   (%PATH_TO_COMPDIR%)/modelsim.ini</command>
      <command>   ln -s   (%PATH_TO_COMPDIR%)/questa_libs</command>
      <command>   make batch_regression  -f (%MAKEFILE%) TEST=(%TESTNAME%) SEED=(%seed%) UCDBFILE=(%ucdbfile%) UCDBTESTNAME=(%ucdbtestname%)  COVER=1  BITS=(%BITS%) SETUP=(%ACTUAL_SETUP%)</command>
      <command>   if ($status != 0) then </command>
      <command>       exit(1)</command>
      <command>   endif </command>
      <command> else </command>
      <command>  echo "Running the simulation for the second time,with full vis, DEBUG_MODE=(%DEBUGMODE:0%)"</command>
      <command> touch ~/two.txt </command>
      <command>   ln -s   (%PATH_TO_COMPDIR%)/modelsim.ini</command>
      <command>  ln -s   (%PATH_TO_COMPDIR%)/questa_libs</command>
      <command>  ln -s   (%PATH_TO_COMPDIR%)/vsim.dbg</command>
      <command>  make batch_regression_dbg  -f (%MAKEFILE%) TEST=(%TESTNAME%) SEED=(%seed%) UCDBFILE=(%ucdbfile%) UCDBTESTNAME=(%ucdbtestname%) COVER=1  BITS=(%BITS%)</command>
      <command>   if ($status != 0) exit 1 </command>
      <command> endif </command>
      <command> endif </command>
    </execScript>
  </runnable>


  <!-- ================================================ -->
  <!-- == Reporting Runables  ========================= -->
  <!-- == This section merges all the UCDB files and == -->
  <!-- == generates HTML reports + creates the       == -->
  <!-- == triage file                                == -->
  <!-- ================================================ -->
  <runnable name="coverage_trend_report_csv" type="task" base = "testsetup">
    <execScript launch="/bin/csh -f">
      <command>vcover report -trend -csv (%MERGE_HOME%)/(%ACTUAL_SETUP%)_(%BLOCKNAME%)_trend.ucdb -file (%MERGE_HOME%)/(%ACTUAL_SETUP%)_(%BLOCKNAME%)_trend_report.csv -bydu  </command>
      <command> if ($status != 0) exit 1 </command>
    </execScript>
  </runnable>

  <runnable name="coverage_trend_report_html" type="task" base = "testsetup">
    <execScript launch="/bin/csh -f">
      <command>vcover report -trend -html (%MERGE_HOME%)/(%ACTUAL_SETUP%)_(%BLOCKNAME%)_trend.ucdb -nodetails -htmldir (%HTML_REPORTDIR%)/(%ACTUAL_SETUP%)_(%BLOCKNAME%)_trend_report  </command>
      <command> if ($status != 0) exit 1 </command>
    </execScript>
  </runnable>

  <runnable name="merge_ucdb_files" type="task" base="testsetup">
    <parameters>
       <parameter name="CURRENT_SETUP">(%setup.ITERATION%)</parameter>    
       <parameter name="VPLAN_UCDB">(%DATADIR%)/(%CURRENT_SETUP%).testplan.ucdb</parameter>    
    </parameters>
    <execScript launch="/bin/csh -f">
      <command> echo (%CURRENT_SETUP%) and (%mymergefile%) and (%mymergefile_noplan%) and (%mergelist%) </command>
      <command>ln -s (%MERGE_HOME%) (%DATADIR%)/merged_ucdbfiles </command>
      <command> unsetenv MODELSIM</command>
      <command> if (-e (%mergelist%)) then </command>
      <command>   if (-e (%VPLAN_UCDB%)) then </command>
      <command>     vcover merge (%VCOVER_OPTIONS%) -out (%mymergefile_noplan%) -inputs (%mergelist%) (%mergeoptions%)</command>
      <command>     vcover merge (%VCOVER_OPTIONS%) -out (%mymergefile%) (%mergeoptions%)  (%mymergefile_noplan%) (%VPLAN_UCDB%) </command>
      <command>     if ($status != 0) exit 1     </command>      
      <command>   else </command>
      <command>     vcover merge  (%VCOVER_OPTIONS%) -out (%mymergefile_noplan%) -inputs (%mergelist%) (%mergeoptions%)</command>
      <command>     if ($status != 0) exit 1     </command>      
      <command>   endif </command>

      <command> if ( (%REQUIRE_VPLAN%) != 0) then </command>
      <command>   vcover merge  (%VCOVER_OPTIONS%) -trend (%MERGE_HOME%)/(%ACTUAL_SETUP%)_(%BLOCKNAME%)_trend.ucdb (%MERGE_HOME%)/(%ACTUAL_SETUP%)*merge.ucdb</command>
      <command> if ($status != 0) exit 1 </command>
      <command> else </command>
      <command>   vcover merge  (%VCOVER_OPTIONS%) -trend (%MERGE_HOME%)/(%ACTUAL_SETUP%)_(%BLOCKNAME%)_trend.ucdb (%MERGE_HOME%)/(%ACTUAL_SETUP%)*merge.noplan.ucdb</command>
      <command> if ($status != 0) exit 1 </command>
      <command> endif </command>
      <command>  else </command>
      <command>   echo "No (%mergelist%) was found. Could be because no simulation passed -no idea to do anything more..." </command>
      <command>  exit 1 </command>
      <command> rm -f (%MERGE_HOME%)</command>
      <command>     if ($status != 0) exit 1     </command>      
      <command> endif </command>
    </execScript>
  </runnable>


  <runnable name="covercheck" type="task" base="testsetup" if="(%COVERCHECK%) eq {1}">
    <parameters>
      <parameter name="PATH_TO_COMPDIR" type="tcl">[get_rel_path_between (%TASKDIR%) setup compile_all]</parameter>      
    </parameters>
    <execScript launch="/bin/csh -f">
      <command>unsetenv MODELSIM </command>
      <command>   ln -s   (%PATH_TO_COMPDIR%)/modelsim.ini</command>
      <command>   ln -s   (%PATH_TO_COMPDIR%)/questa_libs</command>
      <command>   if ($status != 0) exit 1     </command>      
      <command>   make create_liblists get_generics covercheck_only  -f (%MAKEFILE%) MERGED_UCDB=(%mymergefile%)  </command>
      <command>   if ($status != 0) exit 1     </command>      
      <command>   vsim -viewcov (%mymergefile%) -do "coverage report -code ecsfb -totals -file before_exclusions.rpt;do Output_Results/covercheck_exclude.do;coverage save (%mymergefile%);coverage report -code ecsfb -totals -file after_exclusions.rpt;exit -f" -c</command>
    </execScript>
  </runnable>

  <runnable name="generate_reports" type="group" sequential="no">
    <parameters>
      <parameter name="CURRENT_SETUP">(%setup.ITERATION%)</parameter>    
      <parameter name="mergelist">(%DATADIR%)/(%CURRENT_SETUP%).mergelist</parameter>
      <parameter name="mymergefile" >(%MERGE_HOME%)/(%CURRENT_SETUP%).(%BLOCKNAME%).(%TIMESTAMP%).merge.ucdb</parameter>
      <parameter name="triagefile">(%DATADIR%)/(%CURRENT_SETUP%).(%BLOCKNAME%).(%TIMESTAMP%).tdb</parameter>
    </parameters>
    <members>
      <member>coverage_html_report</member>
      <member>coverage_trend_report_csv</member>
      <member>coverage_trend_report_html</member>
      <member>create_rankfile</member>
    </members>
  </runnable>


  <runnable name="data_collection" type="group" sequential="yes">
    <parameters>
      <parameter name="CURRENT_SETUP">(%setup.ITERATION%)</parameter>    
      <parameter name="mergelist">(%DATADIR%)/(%CURRENT_SETUP%).mergelist</parameter>
      <parameter name="mymergefile" >(%MERGE_HOME%)/(%CURRENT_SETUP%).(%BLOCKNAME%).(%TIMESTAMP%).merge.ucdb</parameter>
      <parameter name="mymergefile_noplan" >(%MERGE_HOME%)/(%CURRENT_SETUP%).(%BLOCKNAME%).(%TIMESTAMP%).merge.noplan.ucdb</parameter>
      <parameter name="triagefile">(%DATADIR%)/(%CURRENT_SETUP%).(%BLOCKNAME%).(%TIMESTAMP%).tdb</parameter>
    </parameters>
    <members>
      <member>merge_ucdb_files</member>
      <member>covercheck</member>
      <member>generate_reports</member>
    </members>
  </runnable>


  <runnable name="convert_vplan_to_ucdb"  type="task"  if="(%REQUIRE_VPLAN%) eq {1}">
    <parameters>
      <parameter name="VPLAN_UCDB">(%DATADIR%)/(%CURRENT_SETUP%).testplan.ucdb</parameter>    
      <parameter name="VPLAN_EXCEL_TS" type="tcl">[get_extra_args (%TCSPEC%) (%ACTUAL_SETUP%) VPLAN_EXCEL]</parameter>
    </parameters>
  <!-- Need to execute locally due to openoffice -->
      <method>
      </method>
    <execScript launch="/bin/csh -f">
      <command>unsetenv MODELSIM </command>
      <command>echo DBG: ---------------------------------------</command>
      <command>echo DBG: CURRENT_SETUP  =(%ACTUAL_SETUP%)</command>
      <command>echo DBG: TCSPEC         =(%TCSPEC%)</command>
      <command>echo DBG: VPLAN_UCDB     =(%VPLAN_UCDB%)</command>
      <command>echo DBG: VPLAN_EXCEL_TS =(%VPLAN_EXCEL_TS%)</command>
      <command>echo DBG: ---------------------------------------</command>
      <command>if ((%VPLAN_EXCEL_TS%) == "") then </command>
      <command>  echo "No vplan specified in (%TCSPEC%)" </command>
      <command>  echo "Please add (for each setup):" </command>
      <command>  echo "setup name:VPLAN_EXCEL=path to file" </command>
      <command>  exit 1 </command>
      <command>endif</command>    
      <command>echo "Using excel verification plan:(%VPLAN_EXCEL_TS%)"</command> 

      <command>if (-e (%VPLAN_EXCEL_TS%)) then </command>
      <command>  echo "Found (%VPLAN_EXCEL_TS%) - starting to convert to xml"</command> 
      <command>  excel2xml.pl -i (%VPLAN_EXCEL_TS%) </command>
      <command>  if ($status != 0) then </command>    
      <command>    echo "excel2xml.pl conversion failed"</command>    
      <command>    exit 1          </command>    
      <command>  endif</command>   
      <command>  echo "converting xml to ucdb" </command>  
      <command>  xml2ucdb -format Excel -datafields (%XML2UCDB_DATAFIELDS%) *.xml (%VPLAN_UCDB%) </command>
      <command>  if ($status != 0) exit 1          </command>    
      <command> else </command>
      <command>  echo "(%VPLAN_EXCEL_TS%) not found"</command> 
      <command>  exit 1 </command>
      <command>endif</command>    
    </execScript>
  </runnable>


  <runnable name="coverage_html_report" type="task" base="testsetup">
    <execScript>
      <command> echo "Creating HTML report for (%mymergefile%)"                               </command>
      <command> vcover report -html -nosource -htmldir (%HTML_REPORTDIR%)/(%ACTUAL_SETUP%)_coverage_report (%mymergefile%)</command>
    </execScript>
  </runnable>

  <runnable name="regression_summary" type="task" base="testsetup">
    <execScript launch="/bin/csh -f">
      <command>test -e (%DATADIR%)/merged_ucdbfiles||ln -s (%MERGE_HOME%) (%DATADIR%)/merged_ucdbfiles </command>
      <command>if ($status != 0) exit 1     </command>      
      <command>test -e (%DATADIR%)/html_reports||ln -s (%HTML_REPORTDIR%) (%DATADIR%)/html_reports </command>
      <command>if ($status != 0) exit 1     </command>      
      <command>vrun -vrmdata (%DATADIR%) -status -full -html -htmldir (%DATADIR%)/vrun_status_report</command>
      <command>if ($status != 0) exit 1     </command>      
      <command>ln -s -f (%DATADIR%)/vrun_status_report (%HTML_REPORTDIR%)/vrun_status_report</command>
      <command>if ($status != 0) exit 1     </command>      
     <!--command> vrun -status  -full -html -htmldir regression_run_report -vrmdata (%DATADIR%) -rmdb (%RMDBFILE%)</command>
    <command> cp -rf regression_run_report  (%HTML_REPORTDIR%)</command-->
    </execScript>
  </runnable>

  <!-- ============================================================================= -->
  <!-- == user_report: Call a user provided makefile target if provided              == -->
  <!-- ============================================================================= -->
  <runnable name="user_report" type="task" base="testsetup" if="{(%USER_REPORT_TARGET%)} ne &quot;&quot;">
    <execScript launch="/bin/csh -f">
      <command> echo "Calling user provided target (%USER_REPORT_TARGET%)" </command>
      <command> make -f (%MAKEFILE%) (%USER_REPORT_TARGET%) TIMESTAMP=(%TIMESTAMP%)        </command>
    </execScript>
  </runnable>


    <xi:include href="mytcl.rmdb"/>


</rmdb>
